from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import make_msgid

from aes.message import MessageInfo
from aes.core.exceptions import ImproperlyConfigured, InvalidRecipientPolicy
from aes.delivery.base import DeliveryService
from aes.delivery.base_smtp import BaseRouteDelivery

NOTIFICATION_BODY = """
An outbound email matched the following content filter: {rule_name}

This filter is enabled in the following email security policy: {policy_name}

The email was {destination}.

A copy of the email is attached
"""

destinations = {
    'quarantine': 'moved to Admin Quarantine',
    'deny': 'permanently deleted',
    'send': 'delivered to the recipient'
}

mail_from = 'do-not-reply@serverdata.net'


async def process_copy(msg: MessageInfo, delivery: DeliveryService,
                       recipients: list, rule: str):
    if msg.inbound:
        # Think twice before remove that because of delivery
        raise InvalidRecipientPolicy('No silent copy for inbound filtering')
    if not isinstance(msg.send_delivery, BaseRouteDelivery):
        raise ImproperlyConfigured('Invalid send delivery type for silent copy')
    policy_name = ''
    for info in msg.policy.applied_policies:
        if info['policy_type'] == 'outbound_filtering':
            policy_name = info['display_name'] or info['name']
    email_text = NOTIFICATION_BODY.format(
        rule_name=rule,
        policy_name=policy_name,
        destination=destinations.get(delivery.name),
    )
    report = MIMEMultipart()
    report['From'] = mail_from
    report['To'] = ','.join(recipients)
    report['Subject'] = '[CONTENT FILTER COPY] %s' % msg.subject
    report['Message-ID'] = make_msgid()
    report.attach(MIMEText(email_text))
    report.attach(msg.email)
    data = report.as_bytes()
    msg.log_delivery(
        'silent_copy',
        await msg.send_delivery.send(
            msg,
            mail_from,
            recipients,
            data,
        )
    )
