from raven import Client as RavenClient
from raven.exceptions import (
    APIError,
    ConfigurationError
)

from aes import __version__
from aes.core.statistics import prometheus

from .analytics import get_user_context


counters = {
    counter_type: prometheus.counter('sentry_' + counter_type)
    for counter_type in [
        'api_errors',
        'configuration_errors',
        'connection_errors',
        'other_errors',
        'successful']}


class EventLoopRavenClient(RavenClient):

    def captureException(self, exc_info=None, **kwargs):
        extra = kwargs.pop('extra', None) or {}
        tags = kwargs.pop('tags', None) or {}
        data = kwargs.pop('data', None) or {}
        extra.update(get_user_context())
        user = extra.pop('user', None)
        if user:
            data['user'] = {'email': user}
        tags['version'] = __version__
        kwargs['extra'] = extra
        kwargs['tags'] = tags
        kwargs['data'] = data
        super(EventLoopRavenClient, self).captureException(
            exc_info=exc_info, **kwargs
        )

    def captureMessage(self, message, **kwargs):
        extra = kwargs.pop('extra', None) or {}
        tags = kwargs.pop('tags', None) or {}
        data = kwargs.pop('data', None) or {}
        extra.update(get_user_context())
        user = extra.pop('user', None)
        if user:
            data['user'] = {'email': user}
        tags['version'] = __version__
        kwargs['extra'] = extra
        kwargs['tags'] = tags
        kwargs['data'] = data
        super(EventLoopRavenClient, self).captureMessage(
            message=message, **kwargs
        )

    def _failed_send(self, exc, url, data):
        if isinstance(exc, APIError):
            counters['api_errors'].inc()
        elif isinstance(exc, ConfigurationError):
            counters['configuration_errors'].inc()
        elif isinstance(exc, (ConnectionError, ConnectionRefusedError)):
            counters['connection_errors'].inc()
        else:
            counters['other_errors'].inc()
        super(EventLoopRavenClient, self)._failed_send(exc, url, data)

    def _successful_send(self):
        counters['successful'].inc()
        super(EventLoopRavenClient, self)._successful_send()


# Set up via SENTRY_DSN environ
sentry_client = EventLoopRavenClient(enable_breadcrumbs=False,
                                     release=__version__)
sentry_client.logger.disabled = True
