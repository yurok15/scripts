from functools import wraps
import time
import inspect
import logging

from prometheus_client import Summary, Counter

from .exceptions import BaseFiltersException

logger = logging.getLogger(__name__)


class PrometheusSummary:
    def __init__(self, server, name: str):
        self.server = server
        self.name = name

    def observe(self, amount: float):
        self.server.observe(self.name, amount)


class PrometheusCounter:
    def __init__(self, server, name: str):
        self.server = server
        self.name = name

    def inc(self, amount=1):
        self.server.inc(self.name, amount)


class PrometheusStats:
    def __init__(self):
        self.filter_stat_map = {}
        self._protocol = None

    def observe(self, name: str, dt: float):
        if self._protocol:
            self._protocol.write_data(name, dt)
        else:
            self.filter_stat_map[name].observe(dt)

    def inc(self, name: str, amount=1):
        if self._protocol:
            self._protocol.write_data(name)
        else:
            self.filter_stat_map[name].inc(amount)

    def __call__(self, name: str, label='process time'):
        error_name = name + '_error'

        def wrapper(f):
            if inspect.iscoroutinefunction(f):
                @wraps(f)
                async def func(*args, **kwargs):
                    st = time.time()
                    try:
                        return await f(*args, **kwargs)
                    except Exception as e:
                        if not isinstance(e, BaseFiltersException):
                            self.inc(error_name)
                        raise
                    finally:
                        self.observe(name, max(time.time() - st, 0))
            else:
                @wraps(f)
                def func(*args, **kwargs):
                    st = time.time()
                    try:
                        return f(*args, **kwargs)
                    except Exception as e:
                        if not isinstance(e, BaseFiltersException):
                            self.inc(error_name)
                        raise
                    finally:
                        self.observe(name, max(time.time() - st, 0))
            return func
        # pylint: disable=no-value-for-parameter
        self.filter_stat_map[name] = Summary(name, label)
        # pylint: disable=no-value-for-parameter
        self.filter_stat_map[error_name] = Counter(error_name, 'errors')
        return wrapper

    def connect_to_server(self, protocol):
        self._protocol = protocol

    def counter(self, name: str):
        if name not in self.filter_stat_map:
            # pylint: disable=no-value-for-parameter
            self.filter_stat_map[name] = Counter(name, name)
        return PrometheusCounter(self, name)

    def summary(self, name: str, label: str):
        if name not in self.filter_stat_map:
            # pylint: disable=no-value-for-parameter
            self.filter_stat_map[name] = Summary(name, label)
        return PrometheusSummary(self, name)


prometheus = PrometheusStats()
