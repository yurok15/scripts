from aes.core.statistics import prometheus
from aes.core.smtp.protocol import AESEnvelope
from aes.engines.base import BasePoolEngine
from aes.lib import make_hash
from .connector import SpamConnector


spam_score_counter = prometheus.summary(
    'cyren_spam_score', 'Cyren spam score counter')


class CyrenEngine(BasePoolEngine):
    def _connection_factory(self, loop, config):
        return SpamConnector(
            loop,
            host=config['host'],
            port=config['port'],
            timeout=config.get('timeout', 60),
            retry_attempts=config.get('retry_attempts', 3),
            spam_support=config.get('spam_support', True),
        )

    @prometheus('aes_engine_cyren')
    async def _get_analysis(self, data, source_ip=None, mail_from=None):
        with await self.pool.get() as cyren:
            return await cyren.check_message(
                data, source_ip=source_ip, mail_from=mail_from)

    async def process(self, envelope: AESEnvelope):
        if envelope.hash in self.cache:
            return self.cache.get(envelope.hash)
        analysis = await self._get_analysis(
            envelope.original_content,
            source_ip=envelope.peer[0],
            mail_from=envelope.mail_from.email)
        result = {
            'score': analysis.spam_score,
            'category': analysis.spam_category,
            'reasons': analysis.reason,
            'virus': analysis.virus,
        }
        spam_score_counter.observe(analysis.spam_score)
        self.cache[envelope.hash] = result
        return result

    async def check_attachment(self, data):
        datahash = make_hash(data)
        if datahash in self.cache:
            return {'virus': self.cache[datahash]}
        analysis = await self._get_analysis(data)
        signature = analysis.virus
        self.cache[datahash] = signature
        return {'virus': signature}
