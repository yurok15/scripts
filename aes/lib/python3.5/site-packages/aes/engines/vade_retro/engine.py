from aes.core.statistics import prometheus
from aes.core.smtp.protocol import AESEnvelope
from aes.engines.base import BasePoolEngine
from .connector import VadeRetroConnector

spam_score_counter = prometheus.summary(
    'vaderetro_spam_score', 'VadeRetro spam score counter')


class VadeRetroEngine(BasePoolEngine):
    states = {
        0: 'LEGIT',  # not spam ( spam score  < 100)
        1: 'SPAM',  # the message is spam ( spam score  >= 100)
        2: 'VIRUS',  # virus detected by VadeRetroâ€™s heuristic AV
        3: 'BOUNCE',  # bounce message (spam score >= 10000)
        4: 'VIRUS EX',  # third party antivirus
        6: 'SUSPICIOUS',    # Emails with a subject that may potentially cause
                            # damage to the company. (For example, emails
                            # with content about money transfers).
                            # This state allows you to alert the recipient.
                            # (spam score > 0)
        10: 'PCE',  # Professional Commercial Email detected by signature
                    # (spam score > 0)
        11: 'MCE',  # Miscellaneous Commercial Email detected by heuristics
                    # (spam score > 0)
        12: 'DCE',  # Dirty Commercial Email detected by signature
                    # (spam score > 100)
        13: 'SN',   # Social network alerts and notifications
    }
    bounce_categories = ['BOUNCE']
    marketing_categories = ['PCE', 'MCE']
    phishing_categories = ['SUSPICIOUS']
    virus_categories = ['VIRUS', 'VIRUS EX']

    def _connection_factory(self, loop, config):
        return VadeRetroConnector(
            loop,
            host=config['host'],
            port=config['port'],
            timeout=config.get('timeout', 60),
            retry_attempts=config.get('retry_attempts', 3),
        )

    @prometheus('aes_engines_vade_retro')
    async def process(self, envelope: AESEnvelope):
        if envelope.hash in self.cache:
            return self.cache.get(envelope.hash)
        with await self.pool.get() as vr:
            result = await vr.get_score(envelope.original_content)
        score, state, reasons = result
        spam_score_counter.observe(score)
        category = self.states.get(state, 'u%s' % state)
        result = {
            'score': score,
            'category': category,
            'reasons': reasons
        }
        self.cache[envelope.hash] = result
        return result
