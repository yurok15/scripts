import logging

from aes.core.controller import BaseService
from aes.core.smtp.protocol import AESEnvelope
from aes.lib.connection_pool import ConnectionPool
from aes.filters.cache import FilterCache
from aes.lib import make_hash

logger = logging.getLogger(__name__)


class BaseEngineService(BaseService):
    async def process(self, envelope: AESEnvelope):
        raise NotImplementedError()

    async def version(self) -> str:
        """ Returns engine version """
        return ''


class BasePoolEngine(BaseEngineService):
    def __init__(self, name, controller, config, loop):
        super(BasePoolEngine, self).__init__(name, controller, config, loop)
        self.pool = None
        self.cache = FilterCache(name=name,
                                 ttl=config.get('cache_ttl', 60),
                                 lru=config.get('cache_lru', 100))

    async def start(self):
        self.pool = ConnectionPool(
            self.loop,
            self._connection_factory,
            limit=self.config.get('limit', 10),
            config=self.config)

    def _connection_factory(self, loop, config):
        raise NotImplementedError

    async def process(self, envelope: AESEnvelope):
        raise NotImplementedError()

    def close(self):
        self.pool.close()

    async def version(self):
        with await self.pool.get() as connection:
            return await connection.version()


class BaseAVEngine(BasePoolEngine):
    def __init__(self, name, controller, config, loop):
        super(BaseAVEngine, self).__init__(name, controller, config, loop)
        self.fast_plain_text = config.get('fast_plain_text') or False

    def _connection_factory(self, loop, config):
        raise NotImplementedError

    async def check_data(self, data: bytes):
        with await self.pool.get() as connection:
            return await connection.check(data)

    async def check_attachment(self, data):
        datahash = make_hash(data)
        if datahash in self.cache:
            signature = self.cache[datahash]
        else:
            signature = await self.check_data(data)
            self.cache[datahash] = signature
        return {'virus': signature}

    async def process(self, envelope: AESEnvelope):
        msg = envelope.email
        if self.fast_plain_text and \
                (msg.get_content_type() == 'text/plain') and \
                (not msg.is_multipart()):
            logger.info('Plain text message, skip virus check')
            return {'virus': None}
        if envelope.hash in self.cache:
            signature = self.cache[envelope.hash]
        else:
            signature = await self.check_data(envelope.original_content)
            self.cache[envelope.hash] = signature
        return {'virus': signature}
