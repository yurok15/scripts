import logging
import socket

from prometheus_client.exposition import generate_latest
from prometheus_client.core import REGISTRY

from aes.services.forks.service import ForksService
from aes.services.http import HttpService, text_response
from aes.core.controller import BaseService
from .fork import PrometheusForkService
from .protocol import PrometheusProtocol

logger = logging.getLogger(__name__)


class PrometheusService(BaseService):
    def __init__(self, name, controller, settings, loop):
        super(PrometheusService, self).__init__(
            name, controller, settings, loop)
        self._read_socket, self.client_socket = socket.socketpair()
        self._limit = 2 ** 16
        self.transport = None

    async def start(self):
        self.transport, _ = await self.loop.create_connection(
            PrometheusProtocol.factory(self.loop),
            sock=self._read_socket
        )

    def close(self):
        if self.transport:
            self.transport.close()
            self.transport = None
        if self.client_socket:
            self.client_socket.close()
            self.client_socket = None

    def optional(self, http: HttpService, forks: ForksService):
        if http:
            http.add_route('*', '/metrics', self._get_prometheus)
        if forks:
            forks.register_fork_service(
                'prometheus',
                PrometheusForkService,
                {'socket': self.client_socket})

    @text_response
    async def _get_prometheus(self, request):
        return generate_latest(REGISTRY)
