import asyncio
import logging
from functools import partial

from aes.core.sentry import sentry_client
from aes.core.statistics import prometheus

logger = logging.getLogger(__name__)


class PrometheusProtocol(asyncio.StreamReaderProtocol):
    def __init__(self, loop):
        super(PrometheusProtocol, self).__init__(
            asyncio.StreamReader(loop=loop),
            self.process_clients,
            loop=loop
        )

    @classmethod
    def factory(cls, loop):
        return partial(cls, loop)

    @staticmethod
    async def process_clients(reader, writer):
        while not reader.at_eof():
            try:
                line = await reader.readline()
                if not line:
                    continue
                line = line[:-1]
                line = line.split(b'\t')
                name = line[0]
                name = str(name, encoding='utf-8')
                if len(line) == 2:
                    value = line[1]
                    value = float(value)
                    prometheus.filter_stat_map[name].observe(value)
                else:
                    prometheus.filter_stat_map[name].inc()
            except Exception as e:
                sentry_client.captureException()
                logger.exception(e)

    def write_data(self, name, dt=None):
        if dt is None:
            data = bytes('%s\n' % (name,), encoding='utf-8')
        else:
            data = bytes('%s\t%s\n' % (name, dt), encoding='utf-8')
        self._stream_writer.write(data)

    def close(self):
        self._stream_writer.close()
