import os

from aes.core.communication.comm_protocol import (
    CommunicationProtocol,
    ChannelsList,
)
from aes.core.controller import BaseService


class CommunicationService(BaseService):
    def __init__(self, name, controller, config, loop):
        super(CommunicationService, self).__init__(
            name, controller, config, loop)
        self.processor = None
        self.channels = ChannelsList()
        self.sock = controller.comm_sock
        self.protocol = None

    async def start(self):
        self.protocol = await CommunicationProtocol.connect_socket(
            self.loop, self.sock, self, self.channels)

    def close(self):
        if self.protocol:
            self.protocol.close()

    def ping(self):
        return "pong %s" % self.controller.fork_name

    def clear_cache(self):
        return self.processor.clear_cache()

    def mails_in_work(self):
        return self.processor.in_progress

    async def update_config(self, config: dict):
        settings = self.controller.settings
        settings.clear()
        settings.update(config)
        await self.processor.update_config()

    def unloop_message(self, message_id):
        self.processor.unloop_message(message_id)

    def status_report(self):
        pool_report = self.processor.engines.pool_report()
        return {
            'mails_in_work': self.processor.in_progress,
            'pid': os.getpid(),
            'pools': pool_report
        }
