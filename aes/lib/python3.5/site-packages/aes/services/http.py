import json
import logging
from functools import wraps

from aiohttp import web

from aes.core.sentry import sentry_client
from aes.core.controller import BaseService

logger = logging.getLogger(__name__)


def json_response(f):
    @wraps(f)
    async def wrapper(obj, request, *args, **kwargs):
        try:
            report = await f(obj, request, *args, **kwargs)
        except Exception as e:
            logger.exception(e)
            sentry_client.captureException()
            raise
        report = bytes(
            json.dumps(report, skipkeys=True, indent=2, default=str),
            encoding='utf-8'
        )
        return web.Response(body=report, content_type='application/json')
    return wrapper


def text_response(f):
    @wraps(f)
    async def wrapper(obj, request, *args, **kwargs):
        try:
            report = await f(obj, request, *args, **kwargs)
        except Exception as e:
            logger.exception(e)
            sentry_client.captureException()
            raise
        return web.Response(body=report, content_type='text/plain')
    return wrapper


class HttpService(BaseService):
    config_required = True

    def __init__(self, name, controller, config, loop):
        super(HttpService, self).__init__(name, controller, config, loop)
        self.host = config['host']
        self.port = config['port']
        self._app = None
        self.server = None
        self.cluster = None
        self._app = web.Application(loop=self.loop)

    @property
    def app(self):
        return self._app

    def add_route(self, method: str, url: str, func):
        self._app.router.add_route(method, url, func)

    async def start(self):
        self.server = await self.loop.create_server(
            self._app.make_handler(loop=self.loop),
            self.host,
            self.port
        )
        return self.server

    async def close_async(self):
        if self._app is not None:
            await self._app.shutdown()
            self._app = None
        if self.server:
            self.server.close()
            self.server = None

    def close(self):
        self.loop.create_task(self.close_async())
