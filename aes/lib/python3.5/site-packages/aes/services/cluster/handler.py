class ClusterHandler:
    def __init__(self, service):
        self.service = service

    async def nodes(self):
        cluster = self.service.cluster
        infos = [node.info for node in cluster.values() if node.discoverable]
        shutdown = [item[0] for item in cluster.shutdown_list.data]
        return infos, shutdown

    async def status(self):
        nodes = {
            node_name: node.status for node_name, node in
            self.service.cluster.items() if node.requestable
        }
        response = await self.service.forks.cluster.make_request(
            'mails_in_work'
        )
        mails = 0
        for worker in response['responses'].values():
            mails += worker['response']
        return {
            'workers': len(response['responses']),
            'mails': mails,
            'nodes': nodes
        }

    async def versions(self):
        from aes import __version__
        response = {'core': __version__}
        processor = self.service.filtering.processor
        response.update(await processor.engines.versions())
        return response

    async def unloop_message(self, message_id):
        await self.service.filtering.unloop_message(message_id)

    async def tribe_request_node(self, node_name, method, *args, **kwargs):
        return await self.service.cluster.request_node(
            node_name, method, *args, **kwargs
        )

    async def tribe_make_request(self, method, *args, **kwargs):
        return await self.service.cluster.make_request(method, *args, **kwargs)
