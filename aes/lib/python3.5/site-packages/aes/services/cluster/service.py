import logging
import time

from aes.core.controller import BaseService
from aes.services import (
    ForksService,
    HttpService,
    FilteringService,
    json_response,
)
from .handler import ClusterHandler
from .server_protocol import ClusterServerProtocol
from .cluster import NodesCluster
from .base import NodeConnectionInfo

logger = logging.getLogger(__name__)


class ClusterService(BaseService):
    def __init__(self, name, controller, config, loop):
        super(ClusterService, self).__init__(name, controller, config, loop)
        self.reconnect_period = config['reconnect_period']
        self.timeout = config['timeout']
        self.host = config['host']
        self.port = config['port']
        self.cluster_name = config.get('name')
        self.cluster_hosts = config['cluster_hosts']
        self.handler = ClusterHandler(self)
        self.cluster = NodesCluster(
            self, self.cluster_name, loop, timeout=self.timeout
        )
        self.server = None
        self.filtering = None
        self.forks = None
        if self.cluster_hosts:
            for host in self.cluster_hosts:
                if ':' in host:
                    host, port = host.split(':', maxsplit=1)
                    port = int(port)
                else:
                    port = self.port
                name = ':'.join([host, str(port)])
                info = NodeConnectionInfo(name, self.cluster_name, host, port)
                self.cluster.node_discovered(info, True)

    def protocol_factory(self):
        return ClusterServerProtocol(self.loop, self.cluster, self.handler,
                                     timeout=self.timeout)

    def optional(self, http_server: HttpService, filtering: FilteringService,
                 forks: ForksService):
        self.filtering = filtering
        self.forks = forks
        if http_server:
            http_server.add_route('*', '/cluster', self.api_cluster_state)

    async def start(self):
        if self.cluster_name:
            self.server = await self.loop.create_server(
                self.protocol_factory,
                host=self.host,
                port=self.port
            )

    def allow_host(self, host):
        if self.cluster_hosts is not None:
            return host in self.cluster_hosts
        return True

    def close(self):
        if self.server:
            self.server.close()
        self.cluster.close()

    async def make_request(self, method: str, *args, **kwargs) -> dict:
        start = time.time()
        assert not method.startswith('_')
        report = await self.cluster.make_request(method, *args, **kwargs)
        report['time'] = time.time() - start
        report['host'] = self.cluster.node_name
        return report

    @json_response
    async def api_cluster_state(self, request):
        return await self.make_request('status')
