import logging

from .base import (
    BaseClusterProtocol,
    HandshakeDiscard,
    NodeConnectionInfo,
    HandshakeAccept,
)


logger = logging.getLogger(__name__)


class ClusterClientProtocol(BaseClusterProtocol):
    def __init__(self, node):
        super(ClusterClientProtocol, self).__init__(
            node.loop, node.cluster, node.service.handler, node_name=node.name,
            timeout=node.cluster.timeout
        )
        self.node = node

    async def do_handshake(self, greeting: NodeConnectionInfo):
        if greeting.name != self.node_name:
            if greeting.name == self.cluster.node_name:
                logger.warning("Found self old name: %s", self.node_name)
                return HandshakeDiscard('luke im your father')
            if self.cluster.node_rename(self.node_name, greeting.name):
                self.node_name = greeting.name
            else:
                self.cluster.node_closed(self.node_name)
                return HandshakeDiscard('Invalid node name')
        if not self.node.cluster_name:
            self.node.cluster_name = greeting.cluster_name
        return HandshakeAccept()
