from aes.core.controller import BaseService
from aes.services.filtering.processor import MailProcessor
from aes.services import ForksService, HttpService, json_response


class FilteringService(BaseService):
    processor = None
    forks = None

    def requires(self, forks: ForksService, processor: MailProcessor):
        self.processor = processor
        self.forks = forks
        forks.register_fork_service('processor', MailProcessor, {})

    def optional(self, http: HttpService):
        if http:
            http.add_route('*', '/clear_cache', self.clear_cache)
            http.add_route('*', '/unloop/{pk}', self.http_unloop_message)

    @json_response
    async def clear_cache(self, request):
        report = await self.forks.cluster.make_request('clear_cache')
        report['responses']['main'] = self.processor.clear_cache()
        return report

    async def update_config(self, config: dict):
        self.controller.settings.clear()
        self.controller.settings.update(config)
        await self.processor.update_config()
        report = await self.forks.cluster.make_request(
            'update_config', config=config
        )
        report['responses']['main'] = {'success': True}
        return report

    @json_response
    async def http_unloop_message(self, request):
        pk = request.match_info['pk']
        await self.unloop_message(pk)
        return {'state': 'success', 'text': 'Marked to pass loop check'}

    async def unloop_message(self, message_id):
        self.processor.unloop_message(message_id)
        await self.forks.cluster.make_request(
            'unloop_message', message_id=message_id
        )
