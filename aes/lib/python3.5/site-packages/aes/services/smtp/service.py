import logging
import socket

from aes.services import ForksService, FilteringService
from aes.core.controller import BaseService
from .server import InboundSMTPServer, OutboundSMTPServer

logger = logging.getLogger(__name__)


class BaseSMTPService(BaseService):
    sub_service = None
    sub_service_name = None
    config_required = True

    def __init__(self, name, controller, config, loop):
        super(BaseSMTPService, self).__init__(name, controller, config, loop)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
        self.sock.bind((config['host'], config['port']))
        self.ssl_available = bool(config.get('ssl'))
        self.tls_available = bool(config.get('starttls'))
        self.host, self.port = self.sock.getsockname()
        self.smtp_settings = config.copy()
        self.smtp_settings['sock'] = self.sock
        self.processor = None
        self.forks = None

    def requires(self, forks: ForksService, filtering: FilteringService):
        self.forks = forks
        forks.register_fork_service(
            self.sub_service_name, self.sub_service, self.smtp_settings)

    def close(self):
        if self.sock:
            self.sock.close()


class InboundSMTPService(BaseSMTPService):
    sub_service = InboundSMTPServer
    sub_service_name = 'inbound_smtp'


class OutboundSMTPService(BaseSMTPService):
    sub_service = OutboundSMTPServer
    sub_service_name = 'outbound_smtp'
