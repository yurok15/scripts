import struct
import simplejson

from aiohttp.web import WebSocketResponse

from aes.services.forks.service import ForksService
from .base_app import BaseApp


class IndexApp(BaseApp):
    app_name = 'index_app'
    js = []
    css = []
    menu = {}

    def __init__(self, forks: ForksService):
        self.cluster = forks.cluster
        self.ws_clients = set()
        self.subscriptions = {}

    async def initialize(self, request):
        return await self.cluster.make_request('status_report')

    async def ws_handler(self, request):
        ws = WebSocketResponse()
        await ws.prepare(request)
        self.ws_clients.add(ws)
        await self.check_subscriptions()
        await ws.receive()
        return ws

    def notify_clients(self, msg):
        for client in self.ws_clients.copy():
            if client.closed:
                self.ws_clients.remove(client)
            else:
                client.send_str(simplejson.dumps(msg))
        if not self.ws_clients:
            for fork in self.subscriptions.copy():
                self.subscriptions[fork]['protocol'].unsubscribe(
                    self.subscriptions[fork]['number'])
                del self.subscriptions[fork]

    async def check_subscriptions(self):
        for fork in self.cluster:
            if fork not in self.subscriptions:
                protocol = await self.cluster[fork].protocol
                handler = self.create_handler(fork, self)
                num = await protocol.subscribe('mail_processor', handler)
                self.subscriptions[fork] = {
                    'protocol': protocol,
                    'number': num,
                    'handler': handler
                }

    @staticmethod
    def create_handler(fork_num, service):
        def comm_handler(raw_data):
            data = struct.unpack('!L', raw_data)[0]
            msg = {
                'fork': fork_num,
                'mails_in_work': data
            }
            service.notify_clients(msg)
        return comm_handler
