from asyncio.selector_events import BaseSelectorEventLoop
import os

import aiohttp_jinja2
import jinja2

from aes.core.controller import BaseService
from aes.services.http import HttpService
from aes.services.cluster.service import ClusterService
from aes.services.forks.service import ForksService
from .base_app import BaseApp
from .cluster_state import ClusterStateApp
from .index_app import IndexApp


class WebService(BaseService):
    project_url = '/'
    web_app_url = '/web_app'
    ws_url = '/ws'

    def __init__(self, name, controller, settings, loop: BaseSelectorEventLoop):
        super(WebService, self).__init__(name, controller, settings, loop)
        self._apps = []
        self.cluster = None

    def add_app(self, app: BaseApp):
        assert isinstance(app, BaseApp)
        self._apps.append(app)

    def requires(self, http: HttpService, forks: ForksService):
        app = http.app
        index_app = IndexApp(forks)
        project_root = os.path.dirname(__file__)
        aiohttp_jinja2.setup(
            app,
            loader=jinja2.PackageLoader('aes.services.web', 'templates')
        )
        app.router.add_static('/static/',
                              path=os.path.join(project_root, 'static'),
                              name='static')
        http.add_route('GET', self.project_url, self.index)
        http.add_route('*', self.web_app_url, self.web_app)
        http.add_route('*', self.ws_url, index_app.ws_handler)
        self.add_app(index_app)

    def optional(self, cluster: ClusterService):
        if cluster:
            self.add_app(ClusterStateApp(cluster))

    @aiohttp_jinja2.template('index.html')
    async def index(self, request):
        return {'apps': [app for app in self._apps if app.menu],
                'version': __import__('aes').__version__}

    async def web_app(self, request):
        params = request.GET.copy()
        app_name = params.pop('app')
        for app in self._apps:
            if app.app_name == app_name:
                return await app.route(request, params)
