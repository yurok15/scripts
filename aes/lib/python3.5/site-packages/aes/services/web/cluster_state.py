from aes.services.cluster.service import ClusterService
from aes.services.cluster.node import ClusterNode
from .base_app import BaseApp


class ClusterStateApp(BaseApp):
    app_name = 'cluster_state'
    js = []
    css = []
    menu = {
        'label': 'Cluster',
        'url': '/cluster',
        'sub_items': [
            {
                'label': 'State',
                'url': '/cluster'
            },
            {
                'label': 'Versions',
                'url': '/versions'
            },
        ]
    }

    def __init__(self, cluster: ClusterService):
        self.cluster = cluster

    async def state(self, request):
        state = await self.cluster.make_request('status')
        responses = state['responses']
        clusters = {}
        for node_name, node_response in responses.items():
            cluster_name = node_response['cluster_name']
            if cluster_name not in clusters:
                clusters[cluster_name] = {}
            clusters[cluster_name][node_name] = node_response
        response = []
        for cluster_name, responses in clusters.items():
            node_names = list(responses.keys())
            node_names.sort()
            node_labels = []
            table = []
            response.append({
                'cluster_name': cluster_name,
                'node_names': node_labels,
                'table': table
            })
            for i, node_name in enumerate(node_names):
                node_labels.append(str(i + 1))
                resp = responses[node_name].get('response')
                connections = []
                for j, name in enumerate(node_names):
                    info = {'name': name, 'label': str(j + 1)}
                    if (i == j) and resp:
                        info['color'] = 'green'
                        info['state'] = 'self'
                    elif (not resp) or (name not in resp['nodes']):
                        info['color'] = 'gray'
                        info['state'] = 'unknown'
                    else:
                        if resp['nodes'][name] == ClusterNode.OK_STATUS:
                            info['color'] = 'green'
                        elif resp['nodes'][name] == ClusterNode.INIT_STATUS:
                            info['color'] = 'yellow'
                        else:
                            info['color'] = 'red'
                        info['state'] = resp['nodes'][name]
                    connections.append(info)
                node = self.cluster.cluster[node_name]
                host_name = "%s:%s" % (node.info.host, node.info.port)
                table.append({
                    'name': node_name,
                    'label': str(i + 1),
                    'workers': resp.get('workers', '-') if resp else '-',
                    'mails': resp.get('mails', '-') if resp else '-',
                    'host': host_name,
                    'connections': connections
                })
        response.sort(key=lambda o: o['cluster_name'])
        return {'clusters': response}

    async def versions(self, request):
        state = await self.cluster.make_request('versions')
        responses = state['responses']
        node_names = list(responses.keys())
        node_names.sort()
        components_labels = ['core']
        table = []
        self_name = self.cluster.cluster.node_name

        for i, node_name in enumerate(node_names):
            response = responses[node_name].get('response')
            if not response:
                continue
            for component_name in response.keys():
                if component_name not in components_labels:
                    components_labels.append(component_name)
        for i, node_name in enumerate(node_names):
            components = []
            response = responses[node_name].get('response') or {}
            for name in components_labels:
                components.append(response.get(name, 'no'))
            if node_name == self_name:
                host_name = 'localhost'
            else:
                node = self.cluster.cluster[node_name]
                host_name = "%s:%s" % (node.info.host, node.info.port)
            table.append({
                'name': node_name,
                'label': str(i + 1),
                'host': host_name,
                'components': components
            })
        return {
            'components': components_labels,
            'table': table
        }
