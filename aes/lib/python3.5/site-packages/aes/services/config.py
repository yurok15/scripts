from asyncio.selector_events import BaseSelectorEventLoop
import json
import logging
import copy

from aes.core.controller import BaseService
from .http import json_response
from . import FilteringService, HttpService, WebService, BaseApp


class ConfigService(BaseService):
    def __init__(self, name, controller, config, loop: BaseSelectorEventLoop):
        super(ConfigService, self).__init__(name, controller, config, loop)
        self.settings_backup = copy.deepcopy(controller.settings)
        self.filtering = None

    def requires(self, http_service: HttpService):
        http_service.add_route('*', '/config', self._update_config)

    def optional(self, filtering: FilteringService, web: WebService):
        self.filtering = filtering
        if web:
            web.add_app(ConfigApp(self))

    async def restore_config(self):
        new_settings = copy.deepcopy(self.settings_backup)
        return await self.filtering.update_config(new_settings)

    def get_config(self):
        if self.filtering:
            return self.filtering.processor.settings
        return self.controller.settings

    @json_response
    async def _update_config(self, request):
        startup_logger = logging.getLogger('startup')
        peername = str(request.transport.get_extra_info('peername'))
        if request.method == 'GET':
            return self.get_config()
        if not self.filtering:
            raise NotImplementedError
        if request.method == 'DELETE':
            startup_logger.warning("Config restored from %s", peername)
            return await self.restore_config()
        body = await request.text()
        config = json.loads(body)
        startup_logger.warning("Config changed from %s", peername)
        for key, value in config.items():
            startup_logger.warning('%s=%s', key, value)
        new_settings = copy.deepcopy(self.get_config())
        new_settings.update(config)
        return await self.filtering.update_config(new_settings)


class ConfigApp(BaseApp):
    app_name = 'config'
    js = []
    css = []
    menu = {
        'label': 'Configuration',
        'url': '/config',
    }

    def __init__(self, service: ConfigService):
        self.service = service

    async def read(self, request):
        config = self.service.get_config()
        return {'config': config}
