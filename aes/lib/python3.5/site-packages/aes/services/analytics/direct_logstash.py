import asyncio
import logging

from logstash.formatter import LogstashFormatterVersion1

from aes.core.filters import ContextFilter
from aes.core.statistics import prometheus

from .base import AnalyticsService


class DirectLogstashService(AnalyticsService):
    def __init__(self, name, controller, config, loop):
        config = config or {}
        super(DirectLogstashService, self).__init__(
            name, controller, config, loop)
        self.formatter = LogstashFormatterVersion1('logstash', None, False)
        self.filter = ContextFilter()
        self.host = config.get('host') or '127.0.0.1'
        self.port = config.get('port') or 11011
        self.reader = None
        self.writer = None

    async def start(self):
        await self._connect()

    @prometheus('logstash_connect')
    async def _connect(self):
        self.reader, self.writer = await asyncio.open_connection(
            host=self.host, port=self.port, loop=self.loop)

    def _disconnect(self):
        if self.writer:
            self.writer.close()
            self.writer = None
            self.reader = None

    def close(self):
        super(DirectLogstashService, self).close()
        self._disconnect()

    @prometheus('logstash_delivery')
    async def log_message(self, message, data=None):
        if (not self.writer or
                self.writer.transport.is_closing() or
                self.reader.at_eof()):
            self._disconnect()
            await self._connect()
        logger = self.analytics_logger
        record = logger.makeRecord(
            logger.name,
            logging.WARNING,
            '(unknown file)',
            0,
            message,
            [],
            None,
            '(unknown function)',
            extra=data)
        self.filter.filter(record)
        self.writer.write(self.formatter.format(record) + b'\n')
        await self.writer.drain()
