import logging
import socket

from logstash import UDPLogstashHandler, formatter


class LogstashClusterHandler(UDPLogstashHandler):
    def __init__(self, hosts, message_type='logstash', tags=None, fqdn=False,
                 version=0):
        logging.Handler.__init__(self)
        self.hosts = hosts
        self.sock = None
        self.closeOnError = False
        self.retryTime = None
        #
        # Exponential backoff parameters.
        #
        self.retryStart = 1.0
        self.retryMax = 30.0
        self.retryFactor = 2.0
        if version == 1:
            self.formatter = formatter.LogstashFormatterVersion1(
                message_type, tags, fqdn
            )
        else:
            self.formatter = formatter.LogstashFormatterVersion0(
                message_type, tags, fqdn
            )

    def makeSocket(self, timeout=1):
        """
        The factory method of SocketHandler is here overridden to create
        a UDP socket (SOCK_DGRAM).
        """
        return socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    def send(self, s):
        """
        Send a pickled string to a socket.

        This function no longer allows for partial sends which can happen
        when the network is busy - UDP does not guarantee delivery and
        can deliver packets out of sequence.
        """
        if self.sock is None:
            self.createSocket()
        for host in self.hosts:
            self.sock.sendto(s, host)
