import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import ssl

from aes.lib import EICAR
from aes.delivery.base_smtp import PatchedSMTP
from aes.services.fake.base import BaseFakeService, TestServices
from aes.services import InboundSMTPService, OutboundSMTPService


class EmailSenderService(BaseFakeService):
    app_name = 'email_sender'
    label = 'Send email'
    url = '/test/email_sender'

    def __init__(self, *args, **kwargs):
        super(EmailSenderService, self).__init__(*args, **kwargs)
        self.ssl_context = ssl.create_default_context(
            ssl.Purpose.SERVER_AUTH,
        )
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        self.tls_context = ssl.create_default_context(
            ssl.Purpose.SERVER_AUTH,
        )
        self.inbound_smtp = None   # type: InboundSMTPService
        self.outbound_smtp = None  # type: OutboundSMTPService

    def optional(self, inbound_smtp: InboundSMTPService,
                 outbound_smtp: OutboundSMTPService):
        self.inbound_smtp = inbound_smtp
        self.outbound_smtp = outbound_smtp

    def requires(self, root: TestServices):
        root.add_app(self)

    async def send_message(self, mail_from, mail_tos, msg, inbound=True):
        smtp = self.inbound_smtp if inbound else self.outbound_smtp
        server = PatchedSMTP(smtp.host, smtp.port, loop=self.loop)
        data = msg.as_bytes()
        ssl_context = self.ssl_context if smtp.ssl_available else None
        await server.connect(ssl=ssl_context)
        try:
            if smtp.tls_available:
                await server.ehlo('test')
                tls_extra = await server.starttls(self.tls_context)
                assert tls_extra is not None
            return await server.sendmail(mail_from, mail_tos, data)
        finally:
            await server.quit()
            await server.close()

    async def web_send(self, request, email_from, email_to, add_eicar):
        data = await request.text()
        add_attachment = add_eicar == 'true'
        if add_attachment:
            msg = MIMEMultipart()
            msg.attach(MIMEText(data))
            attach = MIMEApplication(EICAR)
            attach.add_header(
                'Content-Disposition', 'attachment', filename="virus.exe"
            )
            msg.attach(attach)
        else:
            msg = MIMEText(data)
        msg['From'] = email_from
        msg['To'] = email_to
        try:
            response = await asyncio.wait_for(
                self.send_message(email_from, [email_to], msg),
                60,
                loop=self.loop
            )
            response = response[1]
        except Exception as e:
            response = str(e)
            success = False
        else:
            success = True
        return {'response': response, 'success': success}
