from functools import partial
import copy

from aes.services.fake.base import BaseFakeService, TestServices
from aes.services import FilteringService, BaseSMTPService
from .protocol import ClamAVProtocol


class ClamAVFakeService(BaseFakeService):
    app_name = 'clamav'
    label = 'ClamAV'
    url = '/test/clamav'
    engine_name = 'clam_av'

    protocol = None
    server = None
    filtering = None

    def __init__(self, name, controller, config, loop):
        super(ClamAVFakeService, self).__init__(
            name, controller, config, loop)
        self.answers = []
        self.enabled = False
        config = controller.settings['ENGINES'].get(self.engine_name)
        self.old_config = config.copy() if config else None
        if self.auto_enable and config:
            self._update_config(controller.settings)
            self.enabled = True

    def _update_config(self, settings):
        config = settings['ENGINES'].get(self.engine_name)
        config['host'] = self.host
        config['port'] = self.port

    def requires(self, root: TestServices):
        root.add_app(self)

    def optional(self, filtering: FilteringService, smtp: BaseSMTPService):
        if filtering:
            self.filtering = filtering
        if smtp:
            self.host = smtp.host

    async def start(self):
        self.protocol = ClamAVProtocol(self, self.loop)
        self.server = await self.loop.create_server(
            partial(
                ClamAVProtocol,
                self,
                self.loop,
                limit=2 ** 18,
                timeout=None,
            ),
            sock=self.sock
        )

    def configure(self, config):
        self.answers = config

    def get_answer(self, data):
        for answer in self.answers:
            substr = bytes(answer, encoding='utf-8')
            if substr in data:
                return 'stream: %s FOUND' % answer
        return 'stream: OK'

    async def enable(self, _, value):  # request unused
        value = (value == 'true')
        settings = copy.deepcopy(self.filtering.processor.settings)
        if value:
            self._update_config(settings)
        else:
            settings['ENGINES'][self.engine_name] = self.old_config.copy()
        await self.filtering.update_config(settings)

        self.enabled = value

    def get_config(self, _):  # request unused
        return {
            'host': self.host,
            'port': self.port,
            'enabled': self.enabled,
            'signatures': self.answers
        }

    def remove(self, _, value):   # request unused
        if value in self.answers:
            self.answers.remove(value)
        return {'signatures': self.answers}

    def add(self, _, value):   # request unused
        if value not in self.answers:
            self.answers.append(value)
        return {'signatures': self.answers}
