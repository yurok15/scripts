import struct
from asyncio.streams import IncompleteReadError

from aes.lib.chat.protocol import BaseChatProtocol


class ClamAVProtocol(BaseChatProtocol):
    data_state = False
    default_encoding = 'utf-8'

    def __init__(self, service, loop, **kwargs):
        super(ClamAVProtocol, self).__init__(loop=loop, **kwargs)
        self.service = service

    async def handle_client(self, reader, writer):
        line = await reader.read_line()
        assert line == 'nIDSESSION'
        command_number = 0
        while not reader.at_eof():
            if self.data_state:
                data = b''
                while True:
                    data_size = await reader.read(4)
                    size = struct.unpack(b'!L', data_size)[0]
                    if not size:
                        break
                    data += await reader.read(size)
                answer = "%s: %s" % (
                    command_number,
                    self.service.get_answer(data)
                )
                await writer.write_line(answer)
                self.data_state = False
            else:
                try:
                    line = await reader.read_line()
                except IncompleteReadError:
                    break
                if line == 'nVERSION':
                    command_number += 1
                    await writer.write_line(
                        '%s: TestClamAV 1.0' % command_number
                    )
                    continue
                assert line == 'nINSTREAM'
                command_number += 1
                self.data_state = True
