from asyncio.streams import IncompleteReadError
from aes.lib.chat.protocol import BaseChatProtocol


class VadeRetroProtocol(BaseChatProtocol):
    data_state = False
    default_line_separator = b'\r\n'
    default_encoding = 'utf-8'

    def __init__(self, service, loop, **kwargs):
        super(VadeRetroProtocol, self).__init__(loop=loop, **kwargs)
        self.service = service

    async def handle_client(self, reader, writer):
        while not reader.at_eof():
            if self.data_state:
                await reader.readuntil(b'\r\n.\r\n')
                await writer.write_line(self.service.get_answer())
                self.data_state = False
            else:
                try:
                    line = await reader.read_line()
                except IncompleteReadError:
                    break
                if line == 'VERSION':
                    await writer.write_line('VERSION: OK,TestVD 1.0')
                    continue
                assert line == 'VRSCANB'
                await writer.write_line(
                    'OK, End buffer with <CR><LF>.<CR><LF>')
                self.data_state = True
