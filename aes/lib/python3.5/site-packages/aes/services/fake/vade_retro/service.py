from functools import partial
import copy

from aes.services.fake.base import BaseFakeService, TestServices
from aes.services import FilteringService, BaseSMTPService
from aes.engines import VadeRetroEngine
from .protocol import VadeRetroProtocol


class VadeRetroFakeService(BaseFakeService):
    app_name = 'vade_retro'
    label = 'VadeRetro'
    url = '/test/vaderetro'
    engine_name = 'vade_retro'

    protocol = None
    server = None
    filtering = None

    def __init__(self, name, controller, config, loop):
        config = config or {
            'state': 0,
            'score': 7,
            'cause': 'testcause'
        }
        super(VadeRetroFakeService, self).__init__(
            name, controller, config, loop)
        self.enabled = False
        config = controller.settings['ENGINES'].get(self.engine_name)
        self.old_config = config.copy() if config else None
        if self.auto_enable and config:
            self._update_config(controller.settings)
            self.enabled = True

    def _update_config(self, settings):
        config = settings['ENGINES'].get(self.engine_name)
        config['host'] = self.host
        config['port'] = self.port
        config['pool_size'] = 1

    def requires(self, root: TestServices):
        root.add_app(self)

    def optional(self, filtering: FilteringService, smtp: BaseSMTPService):
        if filtering:
            self.filtering = filtering
        if smtp:
            self.host = smtp.host

    async def start(self):
        self.server = await self.loop.create_server(
            partial(
                VadeRetroProtocol,
                self,
                self.loop,
                limit=2 ** 18,
                timeout=None,
            ),
            sock=self.sock
        )

    def get_answer(self):
        return '\t'.join([
            'VRSCANB: OK,State={state}',
            'Score={score}',
            'Cause={cause}',
        ]).format(**self.config)

    def get_config(self, _):   # request unused
        states = list(VadeRetroEngine.states.items())
        states.sort(key=lambda o: o[0])
        config = self.config.copy()
        config['state'] = [
            config['state'],
            VadeRetroEngine.states[config['state']]
        ]
        return {
            'host': self.host,
            'port': self.port,
            'config': config,
            'enabled': self.enabled,
            'states': states
        }

    async def enable(self, _, value):   # request unused
        value = (value == 'true')
        settings = copy.deepcopy(self.filtering.processor.settings)
        if value:
            self._update_config(settings)
        else:
            settings['ENGINES'][self.engine_name] = self.old_config.copy()
        await self.filtering.update_config(settings)
        self.enabled = value

    def configure(self, config):
        self.config = config

    async def web_configure(self, request):
        data = await request.json()
        data['state'] = data['state'][0]
        self.configure(data)
