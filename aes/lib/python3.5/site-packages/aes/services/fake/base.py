from asyncio.selector_events import BaseSelectorEventLoop

from aes.lib import unused_socket
from aes.core.controller import BaseService
from aes.services import BaseApp, WebService


class BaseFakeService(BaseService, BaseApp):
    label = None
    url = None
    menu = None

    def __init__(self, name, controller, config, loop: BaseSelectorEventLoop):
        super(BaseFakeService, self).__init__(name, controller, config, loop)
        self.sock = unused_socket()
        self.host, self.port = self.sock.getsockname()
        self.server = None
        self.protocol = None
        self.auto_enable = controller.settings['AUTO_ENABLE_TEST_SERVICES']

    def close(self):
        if self.protocol:
            self.protocol.close()
        if self.server:
            self.server.close()
            self.server = None
        if self.sock:
            self.sock.close()


class TestServices(BaseService, BaseApp):
    menu = {
        'label': 'Test services',
        'sub_items': []
    }
    web = None

    def __init__(self, name, controller, settings, loop: BaseSelectorEventLoop):
        super(TestServices, self).__init__(name, controller, settings, loop)
        self.apps = []

    def optional(self, web: WebService):
        if web:
            web.add_app(self)
            self.web = web

    def add_app(self, app: BaseFakeService):
        self.apps.append(app)

    async def start(self):
        for app in self.apps:
            self.menu['sub_items'].append({'label': app.label, 'url': app.url})
            if self.web:
                self.web.add_app(app)
