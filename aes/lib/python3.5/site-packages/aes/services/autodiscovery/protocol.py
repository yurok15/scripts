import logging
import pickle

from aes.core.sentry import sentry_client
from aes.services.cluster.cluster import NodesCluster
from aes.services.cluster.base import NodeConnectionInfo

logger = logging.getLogger(__name__)


class Greeting:
    def __init__(self, name, cluster_name, port):
        self.port = port
        self.name = name
        self.cluster_name = cluster_name


class AutoDiscoveryError(Exception):
    pass


class AutoDiscoveryProtocol:
    transport = None

    def __init__(self, cluster: NodesCluster):
        self.cluster = cluster

    def connection_made(self, transport):
        self.transport = transport

    def datagram_received(self, data, addr):
        try:
            greeting = pickle.loads(data)
            if not isinstance(greeting, Greeting):
                raise AutoDiscoveryError('Unknown autodiscovery class')
            cluster_name = getattr(greeting, 'cluster_name', None)
            info = NodeConnectionInfo(greeting.name, cluster_name, addr[0],
                                      greeting.port)
            self.cluster.node_discovered(info, False)
        except Exception as e:
            sentry_client.captureException()
            logger.exception(e)

    @staticmethod
    def error_received(exc):
        sentry_client.captureException()

    def send_ping(self, port):
        greeting = Greeting(self.cluster.node_name, self.cluster.name, port)
        self.transport.sendto(pickle.dumps(greeting))

    @staticmethod
    def connection_lost(exc):
        if exc:
            sentry_client.captureException()
            logger.exception(exc)
