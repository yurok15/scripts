import functools
import urllib.parse
import logging
import simplejson
from aiohttp.client import ClientResponse, hdrs

from aes.lib.chat.connector import BaseHTTPConnector
from aes.lib.connection_pool import ConnectionPool
from aes.core.exceptions import InvalidRecipientPolicy


logger = logging.getLogger(__name__)


DEFAULT_CHUNK_SIZE = 8192


class RemoteServiceNotFoundError(Exception):
    pass


class UnexpectedContentLength(InvalidRecipientPolicy):
    pass


class HTTPConnector(BaseHTTPConnector):

    def __init__(self, loop, content_length_limit=None,
                 chunk_size=None, **kwargs):
        super(HTTPConnector, self).__init__(loop, **kwargs)
        self._content_length_limit = content_length_limit
        self._chunk_size = chunk_size or DEFAULT_CHUNK_SIZE

    @BaseHTTPConnector.retry_connect
    async def json(self, url):
        async with self.protocol.get(url) as resp:
            resp = self._check_response_status(resp, url)
            if resp:
                if self._content_length_limit:
                    return await self._read_response(resp, url)
                return await resp.json(encoding='utf-8',
                                       loads=simplejson.loads)

    @staticmethod
    def _check_response_status(resp: ClientResponse, url):
        if resp.status == 404:
            return None
        if resp.status != 200:
            raise Exception(
                'Remote service error HTTP %s: %s' % (resp.status, url)
            )
        return resp

    async def _read_response(self, resp: ClientResponse, url):
        length = int(resp.headers.get(hdrs.CONTENT_LENGTH, -1))
        if length > self._content_length_limit:
            raise UnexpectedContentLength(
                'Response content too long: %s (%s)' % (str(length), url))
        chunks = []
        length = 0
        while True:
            chunk = await resp.content.read(self._chunk_size)
            if not chunk:
                break
            length += len(chunk)
            if length > self._content_length_limit:
                raise UnexpectedContentLength(
                    'Response content too long: %s (%s)' % (str(length), url))
            chunks.append(chunk)
        data = b''.join(chunks)
        if not data:
            return None
        return simplejson.loads(data, encoding='utf-8')


class BasePolicyPool(object):
    not_found_error = RemoteServiceNotFoundError

    def __init__(self, url, loop, limit=None, retry_attempts=3,
                 content_length_limit=None, chunk_size=None):
        self.url = functools.partial(urllib.parse.urljoin, url)
        self.loop = loop
        self._limit = limit
        self.pool = ConnectionPool(
            loop,
            HTTPConnector,
            limit=limit,
            retry_attempts=retry_attempts,
            content_length_limit=content_length_limit,
            chunk_size=chunk_size
        )

    def get_url(self, path, **kwargs):
        return self.url(
            urllib.parse.quote(path.format(**kwargs))
        )

    async def json(self, url):
        logger.debug("GET " + url)
        with await self.pool.get() as http:
            return await http.json(url)

    def close(self):
        self.pool.close()
