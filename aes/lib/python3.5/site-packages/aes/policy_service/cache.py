from aes.lib.ttl_cache import TTLCache
from aes.policy_service.base_service import BasePolicyPool
from aes.core.statistics import prometheus


class CachedPolicyPool(BasePolicyPool):
    caches = None

    def clear(self):
        return {name: cache.clear() for name, cache in self.caches.items()}

filtering_caches = ['inbound_global', 'outbound_global', 'tenant',
                    'inbound_filtering', 'outbound_filtering',
                    'inbound_personal', 'outbound_personal']
other_caches = ['list', 'inbound_transport', 'outbound_transport', 'domains']
cache_names = filtering_caches + other_caches


def get_counter(kind, name):
    return prometheus.counter(
        'policy_cache_{kind}_{name}'.format(kind=kind, name=name)
    )

hit_counters = {name: get_counter('hit', name) for name in cache_names}
miss_counters = {name: get_counter('miss', name) for name in cache_names}
expire_counters = {name: get_counter('expire', name) for name in cache_names}
evict_counters = {name: get_counter('evict', name) for name in cache_names}


class PolicyCache(TTLCache):
    def __init__(self, name, loop, lru=100, ttl=60, target=None):
        assert name in cache_names
        super(PolicyCache, self).__init__(
            loop, lru=lru, ttl=ttl, target=target
        )
        self.name = name

    def _key_hit(self):
        super(PolicyCache, self)._key_hit()
        hit_counters[self.name].inc()

    def _key_miss(self):
        super(PolicyCache, self)._key_miss()
        miss_counters[self.name].inc()

    def _key_expire(self):
        super(PolicyCache, self)._key_expire()
        expire_counters[self.name].inc()

    def _key_evicted(self):
        super(PolicyCache, self)._key_evicted()
        evict_counters[self.name].inc()
