import gzip
import os

from aes.message import MessageInfo
from .base import DeliveryService


class FolderDelivery(DeliveryService):
    def __init__(self, name, controller, config, loop):
        super(FolderDelivery, self).__init__(name, controller, config, loop)
        self.path = config['path']
        self.prefix = config.get('prefix', '')
        self.gzip = config.get('gzip', False)
        self.raw_data = config.get('raw_data', False)

    def _get_file_name(self, message_id: str, gzip_flag: bool) -> str:
        ext = '.eml.gz' if gzip_flag else '.eml'
        return os.path.join(self.path, self.prefix + message_id + ext)

    async def process(self, msg: MessageInfo):
        """ Save message to directory """
        file_path = self._get_file_name(msg.id, self.gzip)
        func = gzip.open if self.gzip else open
        with func(file_path, 'wb') as f:
            f.write(msg.serialize(self.raw_data))
        msg.log_delivery(self.name, {'path': file_path})
