from aes.message import MessageInfo
from aes.delivery.base_smtp import BaseRouteDelivery
from aes.core.exceptions import InvalidRecipientPolicy


class SendDelivery(BaseRouteDelivery):
    def __init__(self, name, controller, config, loop):
        super(SendDelivery, self).__init__(
            name, controller, config, loop)
        self.out_host = config['out_host']
        self.out_port = config['out_port']

    def _get_data(self, msg: MessageInfo):
        if msg.inbound:
            return msg.serialize(self.raw_data)
        return msg.serialize_and_sign()

    async def get_endpoint(self, msg):
        try:
            return await msg.policy.transport(inbound=msg.inbound)
        except InvalidRecipientPolicy:
            if not msg.inbound:
                return self.out_host, self.out_port
            raise


class ConservativeSendDelivery(SendDelivery):
    def __init__(self, name, controller, config, loop):
        super(ConservativeSendDelivery, self).__init__(
            name, controller, config, loop)
        self.host = config['host']
        self.port = config['port']

    async def get_endpoint(self, msg):
        if msg.inbound:
            return self.host, self.port
        return await super(ConservativeSendDelivery, self).get_endpoint(msg)
