from aes.delivery.base_smtp import (
    BaseSMTPDeliveryService,
    BaseRouteDelivery,
)
from aes.core.exceptions import ImproperlyConfigured, InvalidRecipientPolicy
from aes.message import MessageInfo
from aes.filters.exceptions import (
    BaseQuarantineException,
    AdminQuarantineException,
    UserQuarantineException,
)

FORCED_HEADERS = ['X-AES-Category', 'Spam-Stopper-Id', 'X-Spam-Category']


class AdminQuarantineDelivery(BaseSMTPDeliveryService):
    delivery_name = 'admin_quarantine'
    section_name = 'admin_quarantine'
    _exception_class = AdminQuarantineException
    _attr_name = 'copy_admin_quarantine'

    def __init__(self, name, controller, config, loop):
        super(AdminQuarantineDelivery, self).__init__(
            name, controller, config, loop)
        if name != self.delivery_name:
            raise ImproperlyConfigured(
                '%s delivery can`t be set as %s' % (
                    self.__class__.__name__, name)
            )

    def get_smtp_endpoint(self, msg: MessageInfo, exc) -> tuple:
        smtp_endpoint = None
        if msg.account_settings:
            data = msg.account_settings.get('quarantine') or {}
            data = data.get(self.section_name) or {}
            smtp_endpoint = data.get('smtp_endpoint')
        if not smtp_endpoint:
            smtp_endpoint = exc.smtp_endpoint
        if not smtp_endpoint:
            raise InvalidRecipientPolicy('No quarantine endpoint specified')
        if smtp_endpoint.startswith("smtp:"):
            smtp_endpoint = smtp_endpoint[5:]
        if ":" in smtp_endpoint:
            host, port = smtp_endpoint.split(":")
            return host, int(port)
        return smtp_endpoint, 25

    @staticmethod
    def _serialize(msg: MessageInfo, exc: BaseQuarantineException):
        data = msg.serialize(True)
        for header in FORCED_HEADERS:
            if header in msg.email:
                header_value = msg.email[header]
                if header == 'X-AES-Category':
                    header_value = exc.category
                value = '%s: %s\r\n' % (header, header_value)
                data = value.encode('utf-8') + data
        return data

    async def process(self, msg: MessageInfo):
        """ Send message to quarantine SMTP server """
        exc = getattr(msg, self._attr_name) or msg.exception
        assert isinstance(exc, self._exception_class)
        host, port = self.get_smtp_endpoint(msg, exc)
        data = self._serialize(msg, exc)
        analytics = msg.analytics.copy()
        analytics['send_delivery_endpoint'] = None
        analytics['x_aes_category'] = exc.category
        send_delivery = msg.send_delivery
        if isinstance(send_delivery, BaseRouteDelivery):
            endpoint = await send_delivery.get_endpoint(msg)
            analytics['send_delivery_endpoint'] = {
                'host': endpoint[0],
                'port': endpoint[1],
            }
        msg.log_delivery(
            self.name,
            await self._send(
                host,
                port,
                msg.mail_from,
                [msg.mail_to],
                data,
                analytics=analytics
            )
        )


class UserQuarantineDelivery(AdminQuarantineDelivery):
    delivery_name = 'user_quarantine'
    section_name = 'user_quarantine'
    _exception_class = UserQuarantineException
    _attr_name = 'copy_user_quarantine'

    @staticmethod
    def _serialize(msg: MessageInfo, exc: BaseQuarantineException):
        return msg.serialize(False)
