import logging

from aes.core.controller import BaseController
from aes.core.statistics import prometheus
from aes.core.exceptions import ImproperlyConfigured
from aes.core.silent_copy import process_copy
from aes.message import MessageInfo
from aes.filters.exceptions import (
    DenyException,
    AdminQuarantineException,
    UserQuarantineException,
)
from .base import DeliveryService

logger = logging.getLogger(__name__)

ADMIN_QUARANTINE = 'admin_quarantine'
USER_QUARANTINE = 'user_quarantine'

delivery_names = ['send', ADMIN_QUARANTINE, USER_QUARANTINE, 'deny', 'ndr']

delivery_counters = {name: prometheus.counter('delivery_' + name) for name
                     in delivery_names}

silent_copy_counter = prometheus.counter('delivery_silent_copy')
send_message_errors_counter = prometheus.counter('send_message_errors')


class DeliveryController(BaseController):
    base_class = DeliveryService

    def __init__(self, name, owner, config, loop):
        config = owner.settings['DELIVERY']
        for delivery in delivery_names:
            if delivery not in config:
                raise ImproperlyConfigured(
                    'Delivery %s not configured', delivery)
        super(DeliveryController, self).__init__(name, owner, config, loop)

    def _filter_exception_to_delivery(self, e):
        """
        Choose delivery service by filters exception
        :param BaseFiltersException e: Exception raised while processing mail
        :return: DeliveryService
        """
        if e is None:
            return self['send']
        elif isinstance(e, DenyException):
            return self['deny']
        elif isinstance(e, AdminQuarantineException):
            return self[ADMIN_QUARANTINE]
        elif isinstance(e, UserQuarantineException):
            return self[USER_QUARANTINE]
        else:
            raise e

    async def _deliver(self, message: MessageInfo, delivery):
        message.send_delivery = self['send']
        for config in message.silent_copy:
            await process_copy(message, delivery, **config)
            silent_copy_counter.inc()
        if (not message.inbound) and message.blocked_filter:
            if not await self['ndr'].process(message):
                # Not expected to return something. NDR will return True, if it
                # not send anything.
                delivery_counters['ndr'].inc()
        skip_main_delivery = False
        if message.copy_admin_quarantine:
            logger.info('Starting delivery to admin quarantine')
            delivery_counters[ADMIN_QUARANTINE].inc()
            with message.time('admin_quarantine'):
                await self[ADMIN_QUARANTINE].process(message)
            if delivery == self[ADMIN_QUARANTINE]:
                skip_main_delivery = True
        if message.copy_user_quarantine:
            logger.info('Starting delivery to user quarantine')
            delivery_counters[USER_QUARANTINE].inc()
            with message.time('user_quarantine'):
                await self[USER_QUARANTINE].process(message)
            if delivery == self[USER_QUARANTINE]:
                skip_main_delivery = True
        if not skip_main_delivery:
            logger.info(
                'Starting delivery to %s',
                delivery.name if delivery else ''
            )
            with message.time('delivery'):
                delivery_counters[delivery.name].inc()
                await delivery.process(message)

    async def process(self, message: MessageInfo):
        delivery = self._filter_exception_to_delivery(message.exception)
        message.analytics['delivery'] = delivery.name
        try:
            await self._deliver(message, delivery)
        except:
            send_message_errors_counter.inc()
            raise
