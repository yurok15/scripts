from email.message import Message
from email.header import Header
from email.utils import make_msgid
from email.charset import Charset, QP
import quopri

from aes.message import MessageInfo, Category
from aes.core.exceptions import ImproperlyConfigured, InvalidRecipientPolicy
from .base_smtp import BaseSMTPDeliveryService

CATEGORY_REASON = {
    Category.SPAM: 'The email was classified as spam',
    Category.MARKETING: 'The email was classified as spam',
    Category.VIRUS: 'The email contained a virus',
    Category.CONTENT: 'The email matched a content filter rule',
    Category.BLACK_LIST: 'The recipient is on the Blocked Recipient list',
    Category.ATTACHMENT: 'The email contained a dangerous attachment',
}

NDR_BODY = """
An email that you sent was not delivered to the following recipients:
{env_recipient}

The message was blocked for the following reason:
{reason}

Please contact your email administrator for more information.

Message Details:
TO: {header_recipient}
FROM: {header_sender}
Subject: {subject}
"""

POLICY_MAPPING = {
    Category.SPAM: 'considered_as_spam',
    Category.MARKETING: 'considered_as_spam',
    Category.VIRUS: 'considered_as_virus',
    Category.CONTENT: 'not_safe_content',
    Category.BLACK_LIST: 'sent_to_blocked_recipient',
    Category.ATTACHMENT: 'dangerous_attachment',
}


ndr_success = object()


class NDRDelivery(BaseSMTPDeliveryService):
    def __init__(self, name, controller, config, loop):
        super(NDRDelivery, self).__init__(
            name, controller, config, loop)
        if name != 'ndr':
            raise ImproperlyConfigured(
                'NDR delivery can`t be set as %s' % name
            )
        self.sender = 'do-not-reply@serverdata.net'

    async def process(self, msg: MessageInfo):
        if msg.category not in CATEGORY_REASON:
            return True  # processor can understand that nothing was done
        if not category_enabled_in_policy(msg):
            return True
        data = create_report(msg, self.sender)
        host, port = await msg.policy.transport(True)
        msg.log_delivery(
            self.name,
            await self._send(
                host, port,
                self.sender, [msg.mail_from], data,
                analytics=msg.analytics)
        )


def category_enabled_in_policy(msg: MessageInfo):
    for policy in msg.policy.filtering.values():
        notifications = policy.get('notifications') or {}
        notification_types = notifications.get('notification_types') or []
        if not isinstance(notification_types, list):
            raise InvalidRecipientPolicy('Bad notifications declaration')
        if POLICY_MAPPING[msg.category] in notification_types:
            return True
    return False


def create_report(msg: MessageInfo, sender):

    email_text = NDR_BODY.format(
        reason=CATEGORY_REASON[msg.category],
        subject=msg.subject,
        env_recipient=msg.mail_to,
        header_recipient=', '.join(msg.x_to),
        header_sender=msg.x_from,
    ).encode(encoding='utf-8', errors='surrogateescape')

    ndr_charset = Charset()
    ndr_charset.header_encoding = QP
    ndr_charset.body_encoding = QP
    ndr_charset.input_codec = 'utf-8'
    ndr_charset.output_codec = 'utf-8'
    ndr_charset.output_charset = 'utf-8'
    ndr_charset.input_charset = 'utf-8'

    subject = Header(s='[NON DELIVERY REPORT] %s' % msg.subject,
                     charset=ndr_charset)
    body = quopri.encodestring(email_text)

    report = Message()
    report.set_charset(ndr_charset)
    report['From'] = sender
    report['To'] = msg.mail_from
    report['Subject'] = subject.encode()
    report['Message-ID'] = make_msgid()
    report.set_payload(body)
    return report.as_bytes()
