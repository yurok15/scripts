from collections import namedtuple
from email.message import Message
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

DSNReportRecord = namedtuple('DSNReportRecord', ['value', 'value_type'])
_HUMAN_READABLE = """\
I'm sorry to have to inform you that your message could not
be delivered. It's attached below.

Please, do not reply to this message."""


def parse_delivery_report(report):
    """
    Helper method for DSN records parsing according to
    https://tools.ietf.org/html/rfc3464#section-2

    :param str report: one DSN report (per message or per recipient)
    :return: {'<record_key>': DSNReportRecord()}
    """
    result = {}
    for line in report.splitlines():
        key, _rest = line.split(':', 1)
        _rest = _rest.strip()
        if ';' in _rest:
            value_type, value = map(lambda v: v.strip(), _rest.split(';', 1))
        else:
            value, value_type = _rest, None
        result[key] = DSNReportRecord(value, value_type)
    return result


class BounceMessage(object):
    """Bounce DSN message

    Based on RFC 3464 (https://tools.ietf.org/html/rfc3464)
    Uses some predefined values because we only bounce and
    only by security reasons etc.

    """
    # Need to do: Support for multiple recipients

    def __init__(self, incoming, server_name):
        self.incoming_msg = incoming
        self.server_name = server_name
        self._human_readable = None
        self._delivery_report = None
        self._original_message = None

    @property
    def human_readable(self):
        if self._human_readable is None:
            self._human_readable = MIMEText(_HUMAN_READABLE)
            self._human_readable['Content-Description'] = 'Notification'
        return self._human_readable

    @property
    def delivery_report(self):
        if self._delivery_report is None:
            self._delivery_report = Message()
            self._delivery_report.set_type('message/delivery-status')
            per_message = 'Reporting-MTA: dns; {}'.format(self.server_name)
            self._delivery_report.attach(per_message)
            per_recipient = (
                'Final-Recipient: rfc822; {}\n'
                'Action: failed\n'
                'Status: 5.7.0\n'
            ).format(self.incoming_msg['To'])
            self._delivery_report.attach(per_recipient)
        return self._delivery_report

    @property
    def original_message_part(self):
        if self._original_message is None:
            msg = Message()
            msg.set_type('message/rfc822')
            msg['Content-Description'] = 'Undelivered Message'
            msg.attach(self.incoming_msg)
            self._original_message = msg
        return self._original_message

    def as_mime_message(self):
        msg = MIMEMultipart('report', **{'report-type': 'delivery-status'})
        msg.set_payload([
            self.human_readable,
            self.delivery_report,
            self.original_message_part,
        ])
        return msg
