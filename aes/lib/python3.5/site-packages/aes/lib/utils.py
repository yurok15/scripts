import re
import logging

from aes.lib.mime import get_header


logger = logging.getLogger(__name__)

IP_REGEXP = re.compile(
    r'\[?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.'
    r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.'
    r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.'
    r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?'
)

DOMAIN_REGEXP = re.compile(
    r'\[?(([a-zA-Z0-9][a-zA-Z0-9-]{0,60}[a-zA-Z0-9]\.){1,253}'
    r'([a-zA-Z]{2,61}){1})\]?'
)

POSTFIX_TLS_CONTEX_REGEXP = re.compile(
    r'(?:\(using[\s]*)(?P<tls_version>[\d\w.-\/\\]+)'
    r'(?:[\s]*with cipher[\s]*)(?P<cipher>[\d\w.-]+)'
    r'(?:[\s]*\()(?P<bits>[\d\w\/\s]+)(?:\)\))'
    r'(?:[\s]*\()'
    r'((?P<not_requested>No client certificate requested)|'
    r'(?P<not_present>Client did not present a certificate)|'
    r'(?P<present>Client CN "(?P<client_cn>[\w]+)", Issuer "'
    r'(?P<issuer>[\w]+)" \((?P<verify>[\w\s]+)\)))'
    r'(?:\))',
    re.IGNORECASE
)

CLRF = re.compile(r'(\r?\n)')
WSP = re.compile(r'(\t| )+')


def get_smtp_chain(msg):
    chain = []
    for received in msg.get_all('Received', []):
        line = CLRF.sub(' ', get_header(received))
        line = WSP.sub(' ', line)
        line_lower = line.lower()

        from_section = ''
        by_section = ''

        by_pos = line_lower.find(' by ')
        if by_pos > -1:
            from_section = line[:by_pos]
            by_section = line[by_pos:]
        elif line_lower.startswith('by '):
            by_section = line
        elif line_lower.startswith('from '):
            from_section = line

        found_ip = IP_REGEXP.findall(by_section)
        found_domain = DOMAIN_REGEXP.findall(by_section)
        by_ip = '.'.join(found_ip[0]) if found_ip else ''
        by_domain = found_domain[0][0] if found_domain else ''

        found_ip = IP_REGEXP.findall(from_section)
        found_domain = DOMAIN_REGEXP.findall(from_section)
        from_ip = '.'.join(found_ip[-1]) if found_ip else ''
        from_domain = found_domain[-1][0] if found_domain else ''

        hop = {
            'from': [from_ip, from_domain],
            'by': [by_ip, by_domain],
        }

        tls_cert_check = False
        tls_details = {}
        for match in POSTFIX_TLS_CONTEX_REGEXP.finditer(from_section):
            tls_details['version'] = match.group('tls_version')
            tls_details['cipher'] = match.group('cipher')
            tls_details['bits'] = match.group('bits')
            for group_name in ['not_requested', 'not_present', 'present']:
                if match.group(group_name):
                    tls_details['state'] = match.group(group_name)
            if match.group('present'):
                for group_name in ['client_cn', 'issuer', 'verify']:
                    tls_details[group_name] = match.group(group_name)
                if 'verify' in tls_details and \
                                'OK' in tls_details['verify']:
                    tls_cert_check = True

        if tls_details:
            hop['tls'] = {
                'details': tls_details,
                'cert_verify': tls_cert_check
            }

        chain.append(hop)

    return chain
