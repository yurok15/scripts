import base64
import socket
from ipaddress import ip_network, ip_address
from fnmatch import fnmatch
from hashlib import md5


def match(name, pat):
    """ Match string with pattern including * and ? """
    i = pat.find('*')
    if i < 0:
        i = pat.find('?')
        if i < 0:
            return name == pat
    elif not name.startswith(pat[:i]):
        return False
    return fnmatch(name, pat)


def is_ip(exp):
    octets = exp.split('.')
    return (
        len(octets) == 4 and
        all(octet.isdigit() or octet == '*' for octet in octets)
    )


def ip_match(address, hosts):
    try:
        addr = ip_address(address)
    except ValueError:
        return False
    for tt in hosts:
        try:
            if addr in ip_network(tt):
                return True
        except ValueError:
            pass
        if address and is_ip(tt):
            if match(str(address), tt):
                return True
    return False


def unused_socket(host='127.0.0.1'):
    sock = socket.socket()
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    sock.bind((host, 0))
    return sock


EICAR = base64.b64decode(
    b'WDVPIVAlQEFQWzRcUFpYNTQoUF4pN0NDKTd9JEVJQ0FSLVNUQU5E'
    b'QVJELUFOVElWSVJVUy1URVNU\nLUZJTEUhJEgrSCo=\n')


def make_hash(data):
    hashfunc = md5()
    hashfunc.update(data)
    return hashfunc.hexdigest()
