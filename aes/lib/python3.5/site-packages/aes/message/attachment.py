import os
from email.mime.base import MIMEBase
from email.mime.text import MIMEText

from aes.lib.mime import get_filename, get_header
from .email import FixedMessage

__all__ = ['AttachInfo']


class AttachInfo:
    def __init__(self, message, payload, attach, position):
        self.message = message
        self.attach = attach
        self.payload = payload
        self.position = position
        self.file_name = get_filename(attach)
        self.ext = os.path.splitext(self.file_name)[-1]
        self.size = len(attach.get_payload())
        self.mime_type = attach.get_content_type()
        self.disposition = self._get_content_disposition(attach)
        self.content_type = self._get_content_type(attach)
        self.is_body = False
        self.analytics = {
            'action': 'accepted',
            'content_type': self.content_type,
            'content_size_kb': self.size * 1.0 / 1024,
            'content_size_mb': self.size * 1.0 / (1024 * 1024),
            'content_ext': self.ext,
            'ni_filename': self.file_name[:255],
            'reason': None,
            'additional_info': None,
            'filter_name': None
        }

    def strip(self, filter_name, reason, additional_info=None):
        self.message.attachments.remove(self)
        self.message.add_dropped(self)
        self.payload.remove(self.attach)
        self.analytics.update({
            'action': 'dropped',
            'reason': reason,
            'additional_info': additional_info,
            'filter_name': filter_name,
        })
        self.payload.append(get_strip_placeholder(self))

    @staticmethod
    def _get_content_disposition(attach):
        """Extracts content-disposition from attachment

        Inspired by get_content_type from `email` lib
        """
        missing = object()
        disposition = attach.get('Content-Disposition', missing)
        if disposition is missing:
            return 'inline'
        disposition = get_header(disposition)
        return disposition.partition(';')[0]

    @staticmethod
    def _get_content_type(attach):
        if isinstance(attach, (MIMEBase, FixedMessage)):
            return attach.get_content_type()
        return 'unknown'

    def set_payload(self, payload):
        self.attach.set_payload(payload)

    def __str__(self):
        return "%s %ib" % (self.file_name or self.mime_type, self.size)


strip_text = 'Attachment removed\r\n\r\n' \
    'This file attachment has been classified as dangerous according ' \
    'to your email security policy.\r\n\r\n' \
    'Details: %s'


def get_strip_placeholder(attach):
    """
    Get placeholder for attach
    :param aes.core.message_info.AttachInfo attach:
    :return:
    """
    filename = attach.file_name or 'file'
    placeholder = MIMEText(strip_text % filename)
    placeholder.add_header(
        'Content-Disposition',
        'attachment',
        filename=filename + '-removed.txt'
    )
    return placeholder
