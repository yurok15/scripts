import logging

from aes.message import MessageInfo, Category, SkipFlags
from aes.engines import VadeRetroEngine
from aes.filters.base import BaseEngineFilter
from aes.filters.base_actions import (
    DenyDelivery,
    AddSubject,
    AddSpamHeader,
    QuarantineDelivery,
    AdminQuarantineDelivery,
    UserQuarantineDelivery,
)


logger = logging.getLogger(__name__)


class MarketingFilter(BaseEngineFilter):
    allow_multiple_policy = False
    actions = {
        'deny_delivery': DenyDelivery('marketing', Category.MARKETING),
        'add_subject': AddSubject(prefix='[ MARKETING ]'),
        'add_spam_subject': AddSubject(Category.MARKETING),
        'add_spam_header': AddSpamHeader(Category.MARKETING),
        'quarantine': QuarantineDelivery('marketing', Category.MARKETING),
        'admin_quarantine': AdminQuarantineDelivery(
            'marketing', Category.MARKETING),
        'user_quarantine': UserQuarantineDelivery(
            'marketing', Category.MARKETING),
    }
    skip_flag = SkipFlags.MARKETING | SkipFlags.SPAM
    engine_class = VadeRetroEngine

    async def process(self, message: MessageInfo, marketing=None):
        if not marketing:
            return

        vd_result = self.engine_response(message)
        category = vd_result['category']
        if category in self.engine.marketing_categories:
            message.email['X-Spam-Category'] = vd_result['category']
            message.email['X-Spam-Reasons'] = vd_result['reasons']
            logging.info('Marketing spam detected')
            actions = marketing.get('actions') or []
            reason = category = Category.MARKETING
            for action_conf in actions:
                self.apply_action(
                    message, **action_conf, reason=reason, category=category)
