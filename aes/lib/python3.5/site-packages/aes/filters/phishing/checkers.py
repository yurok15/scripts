from collections import OrderedDict
from fuzzywuzzy import fuzz

from aes.message.info import MessageInfo
from aes.lib import ip_match, match


def domain_impersonation(policy, message: MessageInfo, mail_filter):
    from_domain = message.x_from.split('@')[-1] if message.x_from else None
    if from_domain not in message.policy.domains:
        return
    trusted_hosts = message.policy.trusted_hosts.copy()
    trusted_hosts += policy.get('trusted') or []
    if not ip_match(str(message.envelope.source_ip), trusted_hosts):
        return 'domain_impersonation'


def reply_to(policy, message: MessageInfo, mail_filter):
    x_from = message.x_from or message.mail_from
    from_domain = x_from.split('@')[-1]
    if not message.x_reply_to:
        return
    reply_to_domain = message.x_reply_to.split('@')[-1]
    if from_domain in message.policy.domains and \
            reply_to_domain not in message.policy.domains:
        return 'reply_to'


def nearby_domain(policy, message: MessageInfo, mail_filter):
    level = policy.get('level') or 0
    ratio = mail_filter.matching_levels.get(level)
    result = 0
    matched = None
    from_domain = message.x_from.split('@')[-1] if message.x_from else ''
    if from_domain in message.policy.domains:
        return
    for domain in message.policy.domains:
        cmp = fuzz.ratio(from_domain, domain)
        if cmp > result:
            result = cmp
            matched = domain
    if result > ratio:
        return 'nearby_domain: %s - %s (%s)' % (
            from_domain, matched, result)


def heuristic_phishing(policy, message: MessageInfo, mail_filter):
    result = mail_filter.engine_response(message)
    if result['category'] in mail_filter.engine.phishing_categories:
        message.email['X-Spam-Category'] = result['category']
        message.email['X-Spam-Reasons'] = result['reasons']
        return 'heuristic_phishing'


def user_impersonation(policy, message: MessageInfo, mail_filter):
    if not message.x_from_display_name:
        return
    names_list = policy.get('names') or []
    display_name = message.x_from_display_name.lower()
    for value in names_list:
        if match(display_name, value.lower()):
            return 'user_impersonation: %s' % message.x_from_display_name


checkers = OrderedDict([
    ('domain_impersonation', domain_impersonation),
    ('reply_to', reply_to),
    ('nearby_domains', nearby_domain),
    ('heuristic_phishing', heuristic_phishing),
    ('user_impersonation', user_impersonation),
])
