import logging

from aes.core.statistics import prometheus
from aes.filters.base_actions import (
    PassAction,
    DenyDelivery,
    QuarantineDelivery,
    AdminQuarantineDelivery,
    UserQuarantineDelivery,
    StripAttachment,
    StripAndQuarantine,
)
from aes.message import Category, SkipFlags
from .conditionchecker import ConditionChecker
from ..base import BaseFilter


logger = logging.getLogger(__name__)


class AttachmentsFilter(BaseFilter):
    actions = {
        'bypass': PassAction(),
        'deny_delivery': DenyDelivery('dangerous_attachment',
                                      Category.ATTACHMENT),
        'quarantine': QuarantineDelivery('dangerous_attachment',
                                         Category.ATTACHMENT),
        'admin_quarantine': AdminQuarantineDelivery('dangerous_attachment',
                                                    Category.ATTACHMENT),
        'user_quarantine': UserQuarantineDelivery('dangerous_attachment',
                                                  Category.ATTACHMENT),
        'strip_and_quarantine': StripAndQuarantine('attachments',
                                                   'dangerous_attachment',
                                                   Category.ATTACHMENT),
        'strip_attachment': StripAttachment('attachments',
                                            'dangerous_attachment',
                                            Category.ATTACHMENT),
    }
    actions_attachments = ['strip_and_quarantine', 'strip_attachment']
    skip_flag = SkipFlags.ATTACHMENTS

    @prometheus('aes_filters_new_attachment')
    async def process(self, message, attachments=None):
        attachments = attachments
        logger.debug('Attachments checking...')
        for info in message.attachments.copy():
            if info.is_body:
                continue
            action_conf, rule_name = self.process_part(info, attachments)
            if not action_conf:
                continue
            action_name = action_conf['name']
            if action_name in self.actions_attachments:
                self.apply_action(message, **action_conf, attach_info=info,
                                  additional_info=rule_name)
            else:
                self.apply_action(message, **action_conf)

    @staticmethod
    def process_part(attach_info, config):
        checker = ConditionChecker()
        for rule in config.get('rules') or []:
            if not checker.check(attach_info, rule['condition']):
                continue
            return rule['action'], rule['name']
        return None, None
