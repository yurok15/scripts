import inspect
import logging

from aes.core.exceptions import InvalidRecipientPolicy, ImproperlyConfigured
from aes.message import MessageInfo, SkipFlags
from aes.core.controller import BaseService

logger = logging.getLogger(__name__)


class BaseFilter(BaseService):
    """
    Base filter class
    """
    actions = None
    allow_multiple_policy = False
    skip_flag = SkipFlags.NOTHING

    def __init__(self, name, controller, config, loop):
        super(BaseFilter, self).__init__(name, controller, config, loop)
        sig = inspect.signature(self.process)
        self.categories = []
        for p_name, p_value in sig.parameters.items():
            if p_name == 'message':
                continue
            if p_value.kind == p_value.POSITIONAL_OR_KEYWORD:
                self.categories.append(p_name)

    def get_action(self, action_name):
        action = self.actions and self.actions.get(action_name)

        if action is None:
            raise NotImplementedError(
                'Undefined action {action}'.format(**locals())
            )
        return action

    def apply_action(self, message, name=None, action_type=None,
                     **action_config):
        if not name:
            raise InvalidRecipientPolicy('Action name missed')
        config = action_config.copy()
        logger.info(
            '%s appling action "%s" with conf %s',
            self.__class__.__name__,
            name,
            config,
        )
        action = self.get_action(name)
        action.apply(message, **config)
        return True

    async def process(self, message: MessageInfo, **kwargs):
        """
        Process message

        kwargs names are policy categories filter represents.
        """
        raise NotImplementedError


class BaseEngineFilter(BaseFilter):
    allow_multiple_policy = True
    engine_class = None

    def __init__(self, name, controller, config, loop):
        super(BaseEngineFilter, self).__init__(name, controller, config, loop)
        if not self.engine_class:
            raise ImproperlyConfigured('%s have no engine class', self)
        self.engine = None

    async def start(self):
        self.engine = self.controller.engines.find_cls(self.engine_class)
        if not self.engine:
            raise ImproperlyConfigured('%s have no required engine', self)

    def engine_response(self, message: MessageInfo):
        return message.envelope.engines[self.engine.name]

    async def process(self, message: MessageInfo, **kwargs):
        raise NotImplementedError
