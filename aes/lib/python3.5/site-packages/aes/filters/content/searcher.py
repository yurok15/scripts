from typing import List
import logging


logger = logging.getLogger(__name__)


def _collect_matches(templates: list, excluded: list, data: str):
    matches = []
    for item in templates:
        kind = item.get('kind', 'pharse')
        template = item.get('template')
        match = None
        if kind == 'regex':
            for match_obj in template.finditer(data):
                match = match_obj.group()
                if match and not _match_excluded(excluded, match):
                    matches.append(match)
        elif kind == 'phrase':
            if data.find(template) > -1:
                if not _match_excluded(excluded, template):
                    matches.append(match)
    return matches


def _match_excluded(excluded: list, match: str):
    for item in excluded:
        kind = item.get('kind', 'pharse')
        tt = item.get('template')
        if kind == 'regex':
            if tt.match(match):
                return True
        elif kind == 'phrase':
            if tt == match:
                return True
    return False


def search(rules: list, data: str) -> List[dict]:
    logger.debug('Start simple analysis')
    result = []
    data = data.lower()
    for rule in rules:
        templates = rule.get('templates') or []
        excluded = rule.get('excluded_templates') or []
        matches = _collect_matches(templates, excluded, data)
        if matches:
            result.append(rule)
    return result
