import logging
from operator import itemgetter

from aes.core.statistics import prometheus
from aes.filters.antivirus.vaderetro_av import VadeRetroAVFilter
from aes.filters.base_actions import (
    AddSubject,
    AddSpamHeader,
    DenyDelivery,
    QuarantineDelivery,
    AdminQuarantineDelivery,
    UserQuarantineDelivery
)
from aes.message import Category

logger = logging.getLogger(__name__)


class VadeRetroFilter(VadeRetroAVFilter):
    actions = {
        'deny_delivery': DenyDelivery('spam', Category.SPAM),
        'add_subject': AddSubject(prefix='[ SPAM ]'),
        'add_spam_subject': AddSubject(prefix='[ SPAM ]'),
        'add_spam_header': AddSpamHeader(),
        'quarantine': QuarantineDelivery('spam', Category.SPAM),
        'admin_quarantine': AdminQuarantineDelivery('spam', Category.SPAM),
        'user_quarantine': UserQuarantineDelivery('spam', Category.SPAM),
        'strip_and_quarantine': AdminQuarantineDelivery('virus', Category.VIRUS),
    }

    @prometheus('aes_filters_vaderetro')
    async def process(self, message, spam=None, antivirus=None):
        logger.debug('Process vaderetro filter...')
        response = self.engine_response(message)
        score = response['score']
        category = response['category']
        if category in self.engine.bounce_categories:
            score = 0
        message.spam_score = score
        message.email['X-Spam-Category'] = category
        message.email['X-Spam-Reasons'] = response['reasons']
        if category in self.engine.virus_categories:
            await self._process_virus(message, antivirus or {})
        else:
            if spam:
                for sub_conf in spam.values():
                    if sub_conf:
                        self._internal_process(
                            message, sub_conf, score, category)

    def _internal_process(self, message, config, score, state):
        if (state in self.engine.marketing_categories) or (
                state in self.engine.phishing_categories):
            if state in self.engine.marketing_categories:
                logging.info('Marketing spam detected')
                acts = config.get('marketing_actions') or []
                reason = category = Category.MARKETING
            else:
                logging.info('Phishing spam detected')
                acts = config.get('phishing_actions') or []
                reason = category = Category.PHISHING
            for action_conf in acts:
                self.apply_action(message, **action_conf, reason=reason,
                                  category=category)
                return
        else:
            acts = sorted(
                config.get('classification', []),
                key=itemgetter('min_score'),
                reverse=True
            )

            for act in acts:
                if act['min_score'] <= score:
                    for action_conf in act['actions']:
                        self.apply_action(message, **action_conf,
                                          reason='spam')
                    return
            logger.debug('Nothing found .... OK')
