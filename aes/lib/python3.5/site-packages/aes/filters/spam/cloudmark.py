import logging
from operator import itemgetter

from aes.message import MessageInfo, Category
from aes.core.statistics import prometheus
from aes.filters.base import BaseEngineFilter
from aes.filters.base_actions import (
    AddSubject,
    DenyDelivery,
    AddSpamHeader,
    QuarantineDelivery,
    AdminQuarantineDelivery,
    UserQuarantineDelivery,
)
from aes.engines.cloudmark import CloudmarkEngine

logger = logging.getLogger(__name__)


class CloudmarkFilter(BaseEngineFilter):
    engine_class = CloudmarkEngine
    actions = {
        'deny_delivery': DenyDelivery('spam', Category.SPAM),
        'add_subject': AddSubject(prefix='[ SPAM ]'),
        'add_spam_subject': AddSubject(prefix='[ SPAM ]'),
        'add_spam_header': AddSpamHeader(Category.SPAM),
        'quarantine': QuarantineDelivery('spam', Category.SPAM),
        'admin_quarantine': AdminQuarantineDelivery('spam', Category.SPAM),
        'user_quarantine': UserQuarantineDelivery('spam', Category.SPAM),
    }

    @prometheus('aes_filters_cloudmark')
    async def process(self, message: MessageInfo, spam=None):
        logger.debug('Process cloudmark filter...')
        response = self.engine_response(message)
        score = response['score'] * 100
        acts = sorted(
            spam.get('classification') or [],
            key=itemgetter('min_score'),
            reverse=True
        )

        for act in acts:
            if act['min_score'] < score:
                logger.info('Detected spam by Cloudmark')
                message.spam_score = 10000
                for action_conf in act['actions']:
                    self.apply_action(message, **action_conf)
                return
        logger.debug('Nothing found .... OK')
