import logging

from aes.core.statistics import prometheus
from aes.message import MessageInfo, Category, SkipFlags
from aes.filters.base import BaseFilter
from aes.filters.exceptions import DenyException
from .utils import check, get_matching


logger = logging.getLogger(__name__)


class WhiteBlackFilter(BaseFilter):

    @prometheus('aes_filters_white_black')
    async def process(self, message: MessageInfo, white_black=None):

        emails, source_ip = get_matching(message)

        if 'bypass' in white_black:
            global_bypass = white_black['bypass'] or SkipFlags.NOTHING
        else:
            global_bypass = convert_to_bitmap(
                white_black.get('bypass_filters') or
                white_black.get('skip') or []
            )

        whitelist = white_black.get('white') or []
        for item in whitelist:
            template = item.get('template')
            if not template:
                continue
            if check(emails, source_ip, template):
                if 'bypass' in item:
                    item_bypass = item['bypass'] or SkipFlags.NOTHING
                else:
                    item_bypass = convert_to_bitmap(
                        item.get('bypass_filters') or
                        item.get('skip') or []
                    )
                message.skip_filters |= item_bypass | global_bypass
                log_msg = 'W: ' + template
                logger.info(log_msg)
                return log_msg

        blacklist = white_black.get('black') or []
        for item in blacklist:
            template = item.get('template')
            if not template:
                continue
            if check(emails, source_ip, template):
                log_msg = 'B: ' + template
                logger.info(log_msg)
                raise DenyException(log_msg, category=Category.BLACK_LIST)
        logger.info('Message not match white/black rules')


def convert_to_bitmap(data):
    bitmap = SkipFlags.NOTHING
    if data:
        for item in data:
            bitmap |= SkipFlags()[item]
    return bitmap
