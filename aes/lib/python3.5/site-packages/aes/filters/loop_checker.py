import time

from aes.core.exceptions import MailLoopDetected
from aes.message import MessageInfo
from .base import BaseFilter


class LoopChecker(BaseFilter):
    allow_multiple_policy = True

    def __init__(self, name, controller, config, loop):
        super(LoopChecker, self).__init__(name, controller, config, loop)
        self.loop_limit = config['loop_limit']
        self.keep_timeout = config['keep_timeout']
        self.loop_skips = {}

    def skip_loop(self, message_id: str) -> None:
        self._clear_old_skips()
        self.loop_skips[message_id] = time.monotonic()

    async def process(self, message: MessageInfo, **kwargs):
        self._clear_old_skips()
        if not message.inbound:
            return
        if not self.loop_limit:
            return
        if message.client_message_id in self.loop_skips:
            return 'skipped by id'
        if message.mail_to in self.loop_skips:
            return 'skipped by recipient'
        if '@' + message.domain_to in self.loop_skips:
            return 'skipped by domain'
        loop_count = len(message.email.get_all('Spam-Stopper-Id'))
        if loop_count > self.loop_limit:
            raise MailLoopDetected(
                'Loop count %s exceeded' % self.loop_limit
            )

    def _clear_old_skips(self):
        t = time.monotonic() - self.keep_timeout
        for name, value in list(self.loop_skips.items()):
            if value <= t:
                del self.loop_skips[name]
