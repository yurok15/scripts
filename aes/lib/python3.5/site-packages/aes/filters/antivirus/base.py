import logging

from aes.filters.base import BaseEngineFilter
from aes.filters.exceptions import AdminQuarantineException
from aes.filters.base_actions import (
    AdminQuarantineDelivery,
    UserQuarantineDelivery,
    QuarantineDelivery,
    DenyDelivery,
    CopyToQuarantine
)
from aes.core.sentry import sentry_client
from aes.message import MessageInfo, Category, SkipFlags


logger = logging.getLogger(__name__)


class AntivirusFilter(BaseEngineFilter):
    allow_multiple_policy = True
    actions = {
        'deny_delivery': DenyDelivery('virus', Category.VIRUS),
        'quarantine': QuarantineDelivery('virus', Category.VIRUS),
        'admin_quarantine': AdminQuarantineDelivery('virus', Category.VIRUS),
        'user_quarantine': UserQuarantineDelivery('virus', Category.VIRUS),
        'strip_and_quarantine': CopyToQuarantine(
            'virus', Category.VIRUS, default_quarantine='AdminQuarantine'),
    }
    skip_flag = SkipFlags.ANTIVIRUS

    async def check_attachment(self, data):
        return await self.engine.check_attachment(data)

    async def strip_attachments(self, message):
        size = count = 0
        for info in message.attachments.copy():
            data = info.attach.get_payload(decode=True)
            response = await self.check_attachment(data)
            if 'error' in response:
                raise AdminQuarantineException('error', Category.ERROR, None)
            signature = response['virus']
            if signature:
                info.strip(self.name, 'virus', signature)
                size += info.size
                count += 1
        return size, count

    async def process(self, message: MessageInfo, antivirus=None):
        actions = None
        for name, policy in antivirus.items():
            if policy:
                actions = policy.get('actions')
                logger.debug('Get action from policy %s: %s', name, policy)
            if actions:
                break
        if not actions:
            return
        action_conf = actions[0]
        response = self.engine_response(message)
        if 'error' in response:
            raise AdminQuarantineException('error', Category.ERROR, None)
        signature = response['virus']
        if signature:
            action_name = action_conf['name']
            if action_name in ['strip_the_message', 'strip_and_quarantine']:
                logger.info('Virus %s found, strip message', signature)
                size, count = await self.strip_attachments(message)
                if not (size or count):
                    logger.warning('Virus found, but not stripped', extra={
                        'av': self.name, 'signature': signature})
                    sentry_client.captureMessage(
                        'Virus found, but not stripped', tags={'av': self.name}
                    )
                    return
                if action_name == 'strip_the_message':
                    message.category = Category.VIRUS
                    return
            self.apply_action(message, **action_conf, reason=signature)
