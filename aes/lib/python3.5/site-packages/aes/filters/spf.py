import logging

from aes.core.statistics import prometheus
from aes.message import Category, SkipFlags
from aes.filters.base import BaseFilter
from aes.lib import match
from aes.lib.mime import get_header
from .base_actions import (
    DenyDelivery,
    AddSubject,
    AddHeader,
    AdminQuarantineDelivery,
    UserQuarantineDelivery,
    QuarantineDelivery,
)

logger = logging.getLogger(__name__)


class SPFFilter(BaseFilter):
    actions = {
        'deny_delivery': DenyDelivery('spf_fail', Category.SPF),
        'add_subject': AddSubject(prefix='[ POSSIBLE PHISHING ]'),
        'add_header': AddHeader(),
        'admin_quarantine': AdminQuarantineDelivery('spf_fail', Category.SPF),
        'user_quarantine': UserQuarantineDelivery('spf_fail', Category.SPF),
        'quarantine': QuarantineDelivery('spf_fail', Category.SPF),
    }
    skip_flag = SkipFlags.SPF

    @prometheus('aes_filters_spf')
    async def process(self, message, spf=None):
        logger.debug('Process SPF filter...')
        if 'X-SPF-STATUS' not in message.email:
            logger.warning('SPF check header missed')
            return
        spf_status = get_header(message.email['X-SPF-STATUS']).lower()
        if spf_status == 'pass':
            return
        config = spf or []
        for entry in config:
            domains = entry.get('domains') or []
            domains = [d.lower().strip() for d in domains]
            if not domains:
                continue
            statuses = entry.get('statuses') or []
            if spf_status not in statuses:
                continue
            for domain in domains:
                if match(message.domain_from, domain):
                    action = entry.get('action')
                    actions = entry.get('actions')
                    if actions is None:
                        actions = [action]
                    for action in actions:
                        self.apply_action(message, **action)
                    return
