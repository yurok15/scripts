import logging

from aes.core.statistics import prometheus
from aes.message import MessageInfo, Category
from aes.engines.mailflow import MailFlowEngine, MailFlowResult
from aes.filters.base import BaseEngineFilter
from .base_actions import (
    DenyDelivery,
    PassAction,
    ReturnToQueue,
)

logger = logging.getLogger(__name__)


class MailFlowFilter(BaseEngineFilter):
    """
    Check given email Received chain and SMTP-peer for check message flow
    """
    allow_multiple_policy = True
    actions = {
        'deny_delivery': DenyDelivery('Mailflow_check fail',
                                      Category.MAIL_FLOW),
        'return_to_queue': ReturnToQueue('Mailflow_check fail',
                                         Category.MAIL_FLOW),
        'bypass': PassAction(),
    }
    engine_class = MailFlowEngine

    def __init__(self, name, controller, config, loop):
        config = config or {}
        super(MailFlowFilter, self).__init__(name, controller, config, loop)
        self._action = config.get('action') or 'bypass'

    @prometheus('aes_filters_mailflow_check')
    async def process(self, message: MessageInfo, mailflow=None):

        response = self.engine_response(message)

        if response['result'] == MailFlowResult.NON_LEGIT:
            logger.error('Non legit message in internal mailflow detected')
            self.apply_action(message, self._action)
            return 'fail'
        elif response['result'] == MailFlowResult.ERROR_CONFIGURATION:
            return 'error: %s' % MailFlowResult.ERROR_CONFIGURATION
