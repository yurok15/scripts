import abc
import logging

from aes.message import MessageInfo
from aes.filters.exceptions import (
    DenyException,
    AdminQuarantineException,
    UserQuarantineException,
    ReturnToQueueException,
)
from aes.core.exceptions import InvalidRecipientPolicy

logger = logging.getLogger(__name__)


class BaseAction(object):
    """
    Base class for action if spam found.
    """

    def __init__(self, *args, **kwargs):
        pass

    @abc.abstractmethod
    def apply(self, message):
        """
        Abstract method for all actions.
        :param aes.core.message_info.MessageInfo message: message_info
        :return: None
        :raises if failed
        """


class PassAction(BaseAction):
    """ Action that is do nothing """
    def apply(self, message, **kwargs):
        pass


class AddHeader(BaseAction):
    def apply(self, message, header=None, value=None, **kwargs):
        if (not header) or (value is None):
            raise InvalidRecipientPolicy()
        message.add_header(header, value)


class AddSpamHeader(BaseAction):
    def apply(self, message, **kwargs):
        message.add_header('X-Spam-Status', 'Yes')


class AddSubject(BaseAction):

    def __init__(self, prefix, **kwargs):
        super(AddSubject).__init__()
        self.prefix = prefix

    def apply(self, message, subject=None, **kwargs):
        subj = ''
        while message.email['Subject'] is not None:
            subj = message.email['Subject']
            del message.email['Subject']
        prefix = subject or self.prefix
        message.email['Subject'] = ' '.join([prefix, str(subj)]) \
            if subj else prefix

class BaseFatalAction(BaseAction):
    exception_class = NotImplementedError

    def __init__(self, reason, category):
        super(BaseFatalAction, self).__init__()
        self.reason = reason
        self.category = category

    def apply(self, message, reason=None, category=None):
        raise self.exception_class(reason or self.reason,
                                   category or self.category)


class DenyDelivery(BaseFatalAction):
    exception_class = DenyException


class ReturnToQueue(BaseFatalAction):
    exception_class = ReturnToQueueException


class QuarantineDelivery(BaseFatalAction):
    def apply(self, message, smtp_endpoint=None, quarantine_type=None,
              reason=None, category=None):
        if quarantine_type == 'UserQuarantine':
            raise UserQuarantineException(
                reason or self.reason,
                category or self.category,
                smtp_endpoint)
        else:
            raise AdminQuarantineException(
                reason or self.reason,
                category or self.category,
                smtp_endpoint)


class AdminQuarantineDelivery(QuarantineDelivery):
    def apply(self, message, smtp_endpoint=None, quarantine_type=None,
              reason=None, category=None):
        super(AdminQuarantineDelivery, self).apply(
            message, smtp_endpoint=smtp_endpoint,
            quarantine_type='AdminQuarantine', reason=reason, category=category)


class UserQuarantineDelivery(QuarantineDelivery):
    def apply(self, message, smtp_endpoint=None, quarantine_type=None,
              reason=None, category=None):
        super(UserQuarantineDelivery, self).apply(
            message, smtp_endpoint=smtp_endpoint,
            quarantine_type='UserQuarantine', reason=reason, category=category)


class CopyToQuarantine(BaseAction):
    def __init__(self, reason, category, default_quarantine=None):
        super(CopyToQuarantine, self).__init__()
        self.reason = reason
        self.default_quarantine = default_quarantine
        self.category = category

    def apply(self, message: MessageInfo, smtp_endpoint=None,
              quarantine_type=None, reason=None, **kwargs):
        quarantine_type = quarantine_type or self.default_quarantine
        message.category = self.category
        message.analytics['quarantine_type'] = quarantine_type
        if quarantine_type == 'AdminQuarantine':
            message.copy_admin_quarantine = AdminQuarantineException(
                reason or self.reason,
                self.category,
                smtp_endpoint)
        else:
            message.copy_user_quarantine = UserQuarantineException(
                reason or self.reason,
                self.category,
                smtp_endpoint)


class StripAttachment(BaseAction):
    def __init__(self, filter_name, reason, category):
        super(StripAttachment, self).__init__(reason)
        self.reason = reason
        self.category = category
        self.filter_name = filter_name

    def apply(self, message, attach_info=None, additional_info=None, **kwargs):
        assert attach_info is not None
        message.category = self.category
        attach_info.strip(self.filter_name, self.reason, additional_info)


class StripAndQuarantine(CopyToQuarantine):
    def __init__(self, filter_name, reason, category, default_quarantine=None):
        super(StripAndQuarantine, self).__init__(
            reason, category, default_quarantine=default_quarantine)
        self.filter_name = filter_name

    def apply(self, message, attach_info=None, **kwargs):
        assert attach_info is not None
        message.category = self.category
        attach_info.strip(self.filter_name, self.reason,
                          additional_info=kwargs.get('additional_info'))
        super(StripAndQuarantine, self).apply(message, **kwargs)
