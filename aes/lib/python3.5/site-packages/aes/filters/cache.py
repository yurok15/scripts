import time
import logging

from aes.lib.ttl_cache import TTLCache
from aes.core.statistics import prometheus

logger = logging.getLogger(__name__)


class FilterCache(TTLCache):
    def __init__(self, name, lru=100, ttl=60):
        super(FilterCache, self).__init__(
            loop=None, lru=lru, ttl=ttl, target=None
        )
        self.name = name
        cnt_name = 'filter_{}_cache_'.format(name) + '{}'
        self.hit_counter = prometheus.counter(cnt_name.format('hit'))
        self.miss_counter = prometheus.counter(cnt_name.format('miss'))
        self.expire_counter = prometheus.counter(cnt_name.format('expire'))
        self.evict_counter = prometheus.counter(cnt_name.format('evict'))

    def _key_hit(self):
        super(FilterCache, self)._key_hit()
        self.hit_counter.inc()

    def _key_miss(self):
        super(FilterCache, self)._key_miss()
        self.miss_counter.inc()

    def _key_expire(self):
        super(FilterCache, self)._key_expire()
        self.expire_counter.inc()

    def _key_evicted(self):
        super(FilterCache, self)._key_evicted()
        self.evict_counter.inc()

    def get(self, key):
        if key in self._cache:
            t, data = self._cache.get(key)
            if not self._check_ttl(t, key):
                return None
            self._key_hit()
            self._log('Returning "%s" from cache', key)
            return data
        self._key_miss()
        return None

    def __contains__(self, key):
        if key in self._cache:
            t, _ = self._cache.get(key)
            if self._check_ttl(t, key):
                return True
        self._key_miss()
        return False

    def __setitem__(self, key, value):
        self._log('Set cache for "%s"', key)
        self._cache[key] = time.time(), value
        if len(self._cache.keys()) > self.lru:
            self._key_evicted()
            self._cache.popitem(last=False)

    def _check_ttl(self, t, key):
        if time.time() - t >= self.ttl:
            self._key_expire()
            self._log('Deleting "%s" from cache by TTL', key)
            del self._cache[key]
            return False
        return True
