import logging
from collections import OrderedDict

# pylint: disable=no-name-in-module
from setproctitle import setproctitle

# here we can list only packages that don`t create loggers
from aes.core.loop import get_prepared_loop, get_settings, finalize_loop
from aes.core.sentry import sentry_client
from aes import __version__


def main(loop=None, settings=None):
    try:
        setproctitle('AESCoreMain')
        settings = settings or get_settings()
        logger = logging.getLogger('startup')
        logger.warning('AES v%s starting...', __version__)
        welcome_str = '{:=^80}'.format(' SETTINGS ')
        logger.info(welcome_str)
        for key, value in sorted(settings.items()):
            if value:
                logger.info('%s=%s', key, value)
        logger.info('=' * 80)
        loop = get_prepared_loop(settings, loop=loop)
        try:
            from aes.core.controller import ServicesController
            services = OrderedDict(settings['SERVICES'])
            with ServicesController(settings, services, loop) as controller:
                try:
                    loop.run_until_complete(controller.start())
                    loop.run_forever()
                except KeyboardInterrupt:
                    pass
        finally:
            logger.warning('Finalize loop')
            finalize_loop(loop)
            logger.warning('Successfully stopped')
    except:
        sentry_client.captureException()
        raise
