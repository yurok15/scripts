import copy

import pytest

from aes.conf import Settings
from aes.core.exceptions import ImproperlyConfigured
from aes.engines import VadeRetroEngine, CloudmarkEngine
from aes.filters import SpamFilter


@pytest.mark.parametrize('engine_name', ['vade_retro', 'cloudmark'])
async def test_no_engine(msg, service_runner, engine_name):
    settings = Settings()
    conf = copy.deepcopy(settings['ENGINES'])
    del conf[engine_name]
    with pytest.raises(ImproperlyConfigured):
        await service_runner(settings={'ENGINES': conf})


async def test_filter(msg, service_runner):
    settings = {
        'FILTERS': {
            'spam': {'class': SpamFilter}
        },
        'ENGINES': {
            'vade_retro': {'class': VadeRetroEngine},
            'cloudmark': {'class': CloudmarkEngine},

        }
    }
    msg.policy.filtering['group']['spam'] = {
        'classification': [{
            'min_score': 100,
            'actions': [{'name': 'deny_delivery'}]
        }]
    }
    runner = await service_runner(settings=settings)
    runner['vade_retro'].configure({
        'state': 1, 'score': 101, 'cause': 'testcause'})
    await runner.run_info(msg)
    denied = runner['delivery_deny'].mail_box[0].message
    assert denied['X-AES-Category'] == 'SPAM'


async def test_vd_virus(msg, service_runner):
    settings = {
        'FILTERS': {
            'spam': {'class': SpamFilter}
        },
        'ENGINES': {
            'vade_retro': {'class': VadeRetroEngine},
            'cloudmark': {'class': CloudmarkEngine},
        }
    }
    msg.policy.filtering['group']['spam'] = {
        'classification': [{
            'min_score': 0,
            'actions': [{'name': 'deny_delivery'}]
        }]
    }
    runner = await service_runner(settings=settings)
    runner['vade_retro'].configure({
        'state': 2, 'score': 10, 'cause': 'testcause'})
    await runner.run_info(msg)
    denied = runner['delivery_deny'].mail_box[0].message
    assert denied['X-AES-Category'] == 'SPAM'


async def test_bounce_category(msg, service_runner):
    settings = {
        'FILTERS': {
            'spam': {'class': SpamFilter}
        },
        'ENGINES': {
            'vade_retro': {'class': VadeRetroEngine},
            'cloudmark': {'class': CloudmarkEngine},
        }
    }
    msg.policy.filtering['group']['spam'] = {
        'classification': [{
            'min_score': 1,
            'actions': [{'name': 'deny_delivery'}]
        }]
    }
    runner = await service_runner(settings=settings)
    runner['vade_retro'].configure({
        'state': 3, 'score': 10000, 'cause': 'testcause'})
    await runner.run_info(msg)
    sent = runner['delivery_send'].mail_box[0].message
    assert sent['X-AES-Category'] == 'LEGIT'
    assert sent['X-Spam-Category'] == 'BOUNCE'
    assert sent['X-Spam-Score'] == '0'
