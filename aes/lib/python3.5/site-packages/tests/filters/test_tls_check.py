from email import message_from_string

import pytest

from aes.message import MessageInfo
from aes.filters import TLSCheckFilter
from aes.filters.exceptions import DenyException
from aes.engines.mailflow import MailFlowEngine, MailFlowResult


def get_tls_check_policy(validate_ca=False):
    return {
        'rules': [
            {
                'name': 'test_rule',
                'domains': [
                    {
                        'domain_name': '*google.com',
                        'validate_ca': validate_ca,
                    },
                ],
                'actions': [
                    {
                        'name': 'deny_delivery'
                    }
                ]
            },
        ]
    }


def get_tls_filter(loop, data=None):
    class FakeTLSCheckFilter(TLSCheckFilter):
        def engine_response(self, message: MessageInfo):
            return {'result': data or MailFlowResult.EXTERNAL}
    return FakeTLSCheckFilter('tls_check', None, {}, loop)


async def test_legit_verify(simple_msg, loop):
    simple_msg.domain_from = 'google.com'
    simple_msg.envelope.gate_record = {
        'from': ('10.0.0.1', 'mail-lf0-f68.google.com'),
        'by': ('', 'west.smtp.intermedia.net'),
        'tls': {'cert_verify': True, 'details': {'version': 'TLSv1.2'}}
    }
    f = get_tls_filter(loop)
    await f.process(simple_msg, get_tls_check_policy(True))


async def test_legit_no_verify(simple_msg, loop):
    simple_msg.domain_from = 'google.com'
    simple_msg.envelope.gate_record = {
        'from': ('10.0.0.1', 'mail-lf0-f68.google.com'),
        'by': ('', 'west.smtp.intermedia.net'),
        'tls': {'cert_verify': False, 'details': {'version': 'TLSv1.2'}}
    }
    f = get_tls_filter(loop)
    await f.process(simple_msg, get_tls_check_policy())


async def test_legit_no_encription(simple_msg, loop):
    simple_msg.domain_from = 'google.com'
    simple_msg.envelope.gate_record = {
        'from': ('10.0.0.1', 'mail-lf0-f68.google.com'),
        'by': ('', 'west.smtp.intermedia.net')
    }
    f = get_tls_filter(loop)
    with pytest.raises(DenyException):
        await f.process(simple_msg, get_tls_check_policy())


async def test_legit_no_cert_verify(simple_msg, loop):
    simple_msg.domain_from = 'google.com'
    simple_msg.envelope.gate_record = {
        'from': ('10.0.0.1', 'mail-lf0-f68.google.com'),
        'by': ('', 'west.smtp.intermedia.net'),
        'tls': {'cert_verify': False, 'details': {'version': 'TLSv1.2'}}
    }
    f = get_tls_filter(loop)
    with pytest.raises(DenyException):
        await f.process(simple_msg, get_tls_check_policy(True))


async def test_internal(simple_msg, loop):
    f = get_tls_filter(loop, MailFlowResult.INTERNAL)
    await f.process(simple_msg, {})


async def test_no_config(simple_msg, loop):
    f = get_tls_filter(loop)
    await f.process(simple_msg, {})


async def test_bad_policy(simple_msg, loop):
    policy = get_tls_check_policy()
    policy['rules'][0]['domains'] = []
    f = get_tls_filter(loop)
    await f.process(simple_msg, policy)


async def test_policy_rules_is_dict(simple_msg, loop):
    policy = get_tls_check_policy()
    policy['rules'] = policy['rules'][0]
    f = get_tls_filter(loop)
    await f.process(simple_msg, policy)


async def test_no_hop(simple_msg, loop):
    simple_msg.domain_from = 'google.com'
    f = get_tls_filter(loop)
    with pytest.raises(DenyException):
        await f.process(simple_msg, get_tls_check_policy())


raw_msg = """\
Received: from MBX180-E1-VA-1.EXCH180.serverpod.net (10.216.161.90)
    by MBX180-E1-VA-1.EXCH180.serverpod.net (10.216.161.90)
    with Microsoft SMTP Server (TLS) id 15.0.1178.4 via Mailbox Transport;
    Mon, 20 Feb 2017 04:28:03 -0800
Received: from CAS180-VA-2.EXCH180.serverpod.net (10.216.161.18)
    by MBX180-E1-VA-1.EXCH180.serverpod.net (10.216.161.90)
    with Microsoft SMTP Server (TLS) id 15.0.1178.4;
    Mon, 20 Feb 2017 04:28:01 -0800
Received: from aesmt180-va-1-2.serverpod.net (10.216.74.7)
    by CAS180-VA-2.EXCH180.serverpod.net (10.216.161.18)
    with Microsoft SMTP Server (TLS) id 15.0.1178.4 via Frontend Transport;
    Mon, 20 Feb 2017 04:28:01 -0800
Received: from aesc180-va-1-1.serverpod.net
    (aesc180-va-1-1.serverpod.net [10.216.76.6]) (using TLSv1.2
    with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
    (No client certificate requested)
    by aesmt180-va-1.serverpod.net (Postfix)
    with ESMTPS id 7FA2F72 for <recipient@intermedia.net>;
    Mon, 20 Feb 2017 04:28:01 -0800 (PST)
Received: from exmx180-va-1-1.serverpod.net (exmx180-va-1-1.serverpod.net
    [10.216.72.6]) (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384
    (256/256 bits)) (No client certificate requested)
    by aesmt180-va-1.serverpod.net (Postfix)
    with ESMTPS id 395AE6A; Mon, 20 Feb 2017 04:28:01 -0800 (PST)
Received: from mail1.bemta5.messagelabs.com
    (mail1.bemta5.messagelabs.com [195.245.231.137])
    (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384
    (256/256 bits)) (No client certificate requested)
    by east.smtp.intermedia.net (Postfix) with ESMTPS id 6C69E76;
    Mon, 20 Feb 2017 04:27:15 -0800 (PST)
Received: from [85.158.136.35] by server-1.bemta-5.messagelabs.com id
    87/4F-23102-2A0EAA85; Mon, 20 Feb 2017 12:27:14 +0000
Received: (qmail 24511 invoked from network); 20 Feb 2017 12:27:13 -00
Received: from unknown (HELO SV1-MAILGW.zen.com) (74.201.126.165)
    by server-3.tower-125.messagelabs.com with AES128-SHA encrypted SMTP;
    20 Feb 2017 12:27:13 -0000
Received: from SV1-JobServer13 ([172.16.7.113]) by SV1-MAILGW.zen.com
    with Microsoft SMTPSVC(7.5.7601.17514);
    Mon, 20 Feb 2017 04:27:11 -0800
Received: from sv1-job13 ([127.0.0.1]) by SV1-JobServer13
    with Microsoft SMTPSVC(7.5.7601.17514);
    Mon, 20 Feb 2017 04:27:10 -0800
X-SOURCE-IP: 127.0.0.1
MIME-Version: 1.0

Body
"""

@pytest.mark.parametrize('validate_ca, delivery', [
    (False, 'delivery_send'),
    (True, 'delivery_deny')
])
async def test_full_flow(loop, validate_ca, delivery, service_runner):
    settings = {
        'ENGINES': {
            'mail_flow': {
                'class': MailFlowEngine,
                'source_ip_present': [{
                    'peer': ['127.0.0.1'],
                    'chain': [
                        ['*.EXCH180.serverpod.net'],
                        ['10.216.161.90'],
                        ['10.216.161.18'],
                        ['*.serverpod.net'],
                        ['*.serverpod.net'],
                        ['east.smtp.intermedia.net']
                    ]}],
                'source_ip_missed': [],
            }
        },
        'FILTERS': [('tls_check', {'class': TLSCheckFilter})]
    }
    msg = message_from_string(raw_msg)
    runner = await service_runner(settings=settings)
    user = runner['policy'].add_user('to@google.com')
    user.account.add_policy('inbound_filtering',
                            {'tls_check': get_tls_check_policy(validate_ca)})
    await runner.run('from@google.com', ['to@google.com'], msg)
    assert len(runner[delivery].mail_box) == 1
