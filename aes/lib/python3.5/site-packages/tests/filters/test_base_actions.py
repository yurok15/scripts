from email.mime.text import MIMEText
from email.header import Header
import pytest

from aes.filters.base_actions import (
    PassAction,
    AddSubject,
    AddHeader,
    AddSpamHeader,
    StripAttachment,
    CopyToQuarantine,
    StripAndQuarantine,
)
from aes.core.exceptions import InvalidRecipientPolicy
from aes.message import Category


def test_add_header(msg):
    action = AddHeader()
    with pytest.raises(InvalidRecipientPolicy):
        action.apply(msg)
    with pytest.raises(InvalidRecipientPolicy):
        action.apply(msg, header='', value='')
    with pytest.raises(InvalidRecipientPolicy):
        action.apply(msg, header='header')


def test_pass_action(msg):
    PassAction().apply(msg)


def test_add_spam_header(msg):
    action = AddSpamHeader()
    action.apply(msg)
    assert msg.email['X-Spam-Status'] == 'Yes'


@pytest.mark.parametrize('subj,expected', [
    ('', 'prefix'),
    (None, 'prefix'),
    ('Subject', 'prefix Subject'),
    (Header('=?ISO-8859-1?B?SkFtZXMgY29vaw=?='),
     'prefix =?ISO-8859-1?B?SkFtZXMgY29vaw=?='),
])
def test_add_subject(msg, subj, expected):
    action = AddSubject(prefix='prefix')
    del msg.email['Subject']
    if subj is not None:
        msg.email['Subject'] = subj
    action.apply(msg)
    assert str(msg.email['Subject']) == expected


def test_copy_to_user_quarantine(m_info_factory):
    msg = m_info_factory(MIMEText(''))
    action = CopyToQuarantine('test', '')
    action.apply(msg)
    assert msg.copy_user_quarantine is not None
    assert msg.copy_admin_quarantine is None


def test_copy_to_admin_quarantine(m_info_factory):
    msg = m_info_factory(MIMEText(''))
    action = CopyToQuarantine('test', '')
    action.apply(msg, quarantine_type='AdminQuarantine',
                 smtp_endpoint='somewere')
    assert msg.copy_user_quarantine is None
    assert msg.copy_admin_quarantine is not None
    assert msg.copy_admin_quarantine.smtp_endpoint == 'somewere'


def test_strip_and_user_quarantine(msg):
    action = StripAndQuarantine('name', 'test', '')
    action.apply(msg, attach_info=msg.attachments[0])
    payload = msg.email.get_payload()
    assert len(payload) == 1
    assert 'Attachment removed' in payload[0].get_payload()
    assert msg.copy_user_quarantine is not None
    assert msg.copy_admin_quarantine is None


def test_strip_and_admin_quarantine(msg):
    action = StripAndQuarantine('name', 'test', '')
    action.apply(
        msg,
        attach_info=msg.attachments[0],
        quarantine_type='AdminQuarantine',
        smtp_endpoint='somewere'
    )
    payload = msg.email.get_payload()
    assert len(payload) == 1
    assert 'Attachment removed' in payload[0].get_payload()
    assert msg.copy_user_quarantine is None
    assert msg.copy_admin_quarantine is not None
    assert msg.copy_admin_quarantine.smtp_endpoint == 'somewere'


def test_strip_attachment(msg):
    action = StripAttachment('name', 'test', Category.ATTACHMENT)
    action.apply(msg, attach_info=msg.attachments[0])
    payload = msg.email.get_payload()
    assert len(payload) == 1
    assert 'Attachment removed' in payload[0].get_payload()
    assert msg.copy_user_quarantine is None
    assert msg.copy_admin_quarantine is None
    assert msg.category == Category.ATTACHMENT
