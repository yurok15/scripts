from unittest.mock import patch

from aiosmtplib.errors import SMTPDataError
import pytest

from aes.conf import Settings
from aes.filters.loop_checker import LoopChecker, MailLoopDetected


async def test_looped_message_pass(service_runner, msg):
    runner = await service_runner()
    msg.email['Spam-Stopper-Id'] = 'foo'
    await runner.run_with_policy(msg.email, {'filters': {}})
    assert len(runner['delivery_send'].mail_box) == 1
    email = runner['delivery_send'].mail_box[0].message
    headers = email.get_all('Spam-Stopper-Id')
    assert len(headers) == 2
    assert 'foo' in headers


async def test_looped_message_break(service_runner, msg):
    settings = Settings()
    for name, config in settings['FILTERS']:
        if name == 'loop_checker':
            config['loop_limit'] = 2
    runner = await service_runner(settings=settings)
    msg.email['Spam-Stopper-Id'] = 'foo'
    msg.email['Spam-Stopper-Id'] = 'bar'
    with pytest.raises(SMTPDataError) as ctx:
        with patch('aes.services.smtp.server.sentry_client'):
            with patch('aes.services.smtp.server.logger'):
                await runner.run_with_policy(msg.email, {'filters': {}})
    exc = ctx.value
    assert exc.code == 451
    assert 'Loop count 2 exceeded' in exc.message


async def test_looped_disabled(service_runner, msg):
    settings = Settings()
    for name, config in settings['FILTERS']:
        if name == 'loop_checker':
            config['loop_limit'] = 0
    runner = await service_runner(settings=settings)
    msg.email['Spam-Stopper-Id'] = 'foo'
    msg.email['Spam-Stopper-Id'] = 'bar'
    await runner.run_with_policy(msg.email, {'filters': {}})
    assert len(runner['delivery_send'].mail_box) == 1
    email = runner['delivery_send'].mail_box[0].message
    headers = email.get_all('Spam-Stopper-Id')
    assert len(headers) == 3
    assert 'foo' in headers
    assert 'bar' in headers


@pytest.mark.parametrize('pk,email_to,result', [
    ('foo@mail.com', 'foo@mail.ru', False),
    ('foo@mail.com', 'foo@mail.com', True),
    ('@mail.com', 'foo@mail.ru', False),
    ('@mail.com', 'foo@mail.com', True),
])
async def test_loop_checker_cases(msg, loop, pk, email_to, result):
    config = {'loop_limit': 1, 'keep_timeout': 10}
    f = LoopChecker('', None, config, loop)
    msg.mail_to = email_to
    msg.domain_to = email_to.split('@')[-1]
    msg.email['Spam-Stopper-Id'] = 'foo'
    msg.email['Spam-Stopper-Id'] = 'bar'
    f.skip_loop(pk)
    if result:
        await f.process(msg)
    else:
        with pytest.raises(MailLoopDetected):
            await f.process(msg)
