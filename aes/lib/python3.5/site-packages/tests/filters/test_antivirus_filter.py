from unittest.mock import patch
from collections import OrderedDict
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import pytest

from aes.filters.antivirus.base import logger, AntivirusFilter as BaseAVFilter
from aes.filters.exceptions import DenyException
from aes.core.sentry import sentry_client
from aes.message import MessageInfo

VIRUS = MIMEText('this is a virus')
VIRUS.add_header('Content-Disposition', 'attachment', filename='virus')


class AntivirusFilter(BaseAVFilter):
    engine_class = object

    def engine_response(self, message: MessageInfo):
        return {'virus': None}


class DumbAntivirusFilter(AntivirusFilter):
    def engine_response(self, message):
        if b'this is a virus' in message.email.as_bytes():
            return {'virus': 'virus'}
        return {'virus': None}

    async def check_attachment(self, data):
        if b'this is a virus' in data:
            return {'virus': 'virus'}
        return {'virus': None}


class DumbFailingAction(object):
    pass


async def test_antivirus_base_with_no_actions(msg, loop):
    f = AntivirusFilter('av', None, {}, loop)
    await f.process(msg, {'actions': []})


async def test_antivirus_base_works_with_no_errors(msg, loop):
    f = AntivirusFilter('av', None, {}, loop)
    config = {
        'group': {'actions': [{"name": 'strip_the_message'}]}
    }
    await f.process(msg, config)


@pytest.fixture(name='av')
def filter_fixture(loop):
    f = DumbAntivirusFilter('av', None, {}, loop)
    return f


@pytest.mark.parametrize('action', ['strip_the_message',
                                    'strip_and_quarantine'])
async def test_virus_in_not_multipart_message(av, m_info_factory, action):
    msg = MIMEText('this is a virus')
    log = []

    def func(m, **kwargs):
        log.append(m)
    info = m_info_factory(msg)
    with patch.object(sentry_client, 'captureMessage', func):
        with patch.object(logger, 'error', return_value=None):
            await av.process(
                info,
                {'group': {'actions': [{'name': action}]}}
            )
    assert len(log) == 1
    assert log[0] == 'Virus found, but not stripped'
    assert info.copy_admin_quarantine is None
    assert info.copy_user_quarantine is None


async def test_subattach_stripped(av, m_info_factory):
    msg = MIMEMultipart()
    subattach = MIMEMultipart()
    msg.attach(subattach)
    subattach.attach(VIRUS)
    info = m_info_factory(msg)
    await av.process(
        info,
        {'group': {'actions': [{"name": 'strip_the_message'}]}},
    )
    payload = subattach.get_payload()
    assert len(payload) == 1
    assert 'Attachment removed' in payload[0].get_payload()


async def test_subattach_strip_and_quarantine(av, m_info_factory):
    msg = MIMEMultipart()
    subattach = MIMEMultipart()
    msg.attach(subattach)
    subattach.attach(VIRUS)
    info = m_info_factory(msg)
    await av.process(
        info,
        {'group': {'actions': [{"name": 'strip_and_quarantine'}]}},
    )
    payload = subattach.get_payload()
    assert len(payload) == 1
    assert 'Attachment removed' in payload[0].get_payload()
    assert info.copy_admin_quarantine is not None
    assert info.copy_user_quarantine is None


async def test_antivirus_filter_ok(av, msg):
    await av.process(msg, {})
    assert msg.email.get_payload()


async def test_strip_attachments(av, msg):
    assert len(msg.email.get_payload()) == 1
    msg.email.attach(VIRUS)
    msg.parse_attachments()
    await av.process(
        msg,
        {'group': {'actions': [{"name": 'strip_the_message'}]}}
    )
    payload = msg.email.get_payload()
    assert len(payload) == 2
    assert payload[1].get_filename() == 'virus-removed.txt'
    assert payload[1].get_payload().startswith('Attachment removed')


async def test_deny_delivery(av, msg):
    msg.email.attach(VIRUS)
    msg.parse_attachments()
    with pytest.raises(DenyException):
        await av.process(
            msg,
            {'group': {'actions': [{"name": 'deny_delivery'}]}},
        )


async def test_dont_deny_without_virus(av, msg):
    await av.process(
        msg,
        {'group': {'actions': [{"name": 'deny_delivery'}]}},
    )


async def test_actions_order(av, msg):
    msg.email.attach(VIRUS)
    msg.parse_attachments()
    config = {
        'actions': [
            {"name": 'deny_delivery'},
            {"name": 'strip_the_message'}
        ],
    }
    with pytest.raises(DenyException):
        await av.process(msg, {'group': config})
    config = {
        'actions': [
            {"name": 'strip_the_message'},
            {"name": 'deny_delivery'}
        ],
    }
    assert len(msg.attachments) == 2
    await av.process(msg, {'group': config})
    assert len(msg.attachments) == 1


async def test_does_not_fail_when_action_fails(av, msg):
    config = {'actions': [{'name': 'dumb_fail'}]}
    av._actions = {'dumb_fail': DumbFailingAction}
    data = await av.process(msg, {'group': config})
    assert data is None  # Should not raise anything


async def test_policy_priority(av, msg):
    msg.email.attach(VIRUS)
    msg.parse_attachments()
    group_config = {
        'actions': [
            {"name": 'deny_delivery'},
        ],
    }
    with pytest.raises(DenyException):
        await av.process(msg, {'group': group_config})
    global_config = {
        'actions': [
            {"name": 'strip_the_message'},
        ],
    }
    config = OrderedDict([
        ('global', global_config),
        ('group', group_config)
    ])
    assert len(msg.attachments) == 2
    await av.process(msg, config)
    assert len(msg.attachments) == 1
