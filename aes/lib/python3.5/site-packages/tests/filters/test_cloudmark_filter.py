import pytest
from aes.filters import CloudmarkFilter
from aes.filters.exceptions import DenyException


class Engine:
    name = 'cloudmark'


def get_engines(score):
    return {
        'cloudmark': {
            'score': score,
            'reasons': 'foobar',
        }
    }


@pytest.mark.parametrize('score,spam', [(94.5, True), (0.5, False)])
async def test_action_processing(loop, msg, score, spam):
    msg.envelope.engines = get_engines(score)
    config = {
        'classification': [
            {
                'min_score': 90,
                'actions': [{'name': 'deny_delivery'}],
            },
        ]
    }
    f = CloudmarkFilter('cloudmark', None, None, loop)
    f.engine = Engine()
    if spam:
        with pytest.raises(DenyException):
            await f.process(msg, config)
    else:
        await f.process(msg, config)


async def test_action_selection(loop, msg):
    msg.envelope.engines = get_engines(95.4)
    msg.email['X-Spam-Score'] = '95.4'
    config = {
        'classification': [
            {
                'min_score': 90,
                'actions': [{'name': 'deny_delivery'}],
            },
            {
                'min_score': 95,
                'actions': [{'name': 'add_subject'}],
            },
        ]
    }
    f = CloudmarkFilter('cloudmark', None, None, loop)
    f.engine = Engine()
    skips = await f.process(msg, config)
    assert skips is None
    assert '[ SPAM ]' in msg.email['Subject']
    assert msg.email['X-Spam-Score'] == '10000'
