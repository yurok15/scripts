import pytest

policy = {
    'antivirus': {'actions': [{'name': 'admin_quarantine'}]},
    'marketing': {'actions': [{'name': 'admin_quarantine'}]},
    'phishing': {
        'heuristic_phishing': {
            'actions': [{'name': 'admin_quarantine'}]}},
    'spam': {
        'classification': [
            {
                'min_score': 150,
                'actions': [{'name': 'admin_quarantine'}],
            }
        ]
    },
    'attachments': {
        'rules': [
            {
                'name': 'test_rule',
                'action': {'name': 'admin_quarantine'},
                'condition': {'file_name': ['*.dll']},
            }
        ]
    }
}


@pytest.fixture(name='runner')
def runner_fixture(service_runner, loop):
    return loop.run_until_complete(service_runner())


async def test_virus_category(msg, runner):
    runner['clamav'].configure(['message'])
    await runner.run_with_policy(msg.email, policy)
    mail_box = runner['quarantine']['admin'].mail_box
    assert len(mail_box) == 1
    assert mail_box[0].message['X-AES-Category'] == 'VIRUS'


@pytest.mark.parametrize('score,state,result', [
    (200, 0, 'SPAM'),
    (0, 10, 'MARKETING'),
    (0, 6, 'PHISHING'),
])
async def test_aes_category_spam(msg, runner, score, state, result):
    runner['vade_retro'].configure({
        'state': state,
        'score': score,
        'cause': 'test'})
    await runner.run_with_policy(msg.email, policy)
    mail_box = runner['quarantine']['admin'].mail_box
    assert len(mail_box) == 1
    assert mail_box[0].message['X-AES-Category'] == result


async def test_dangerous_attachments(msg_dangerous_attachments, runner):
    await runner.run_with_policy(msg_dangerous_attachments.email, policy)
    mail_box = runner['quarantine']['admin'].mail_box
    assert len(mail_box) == 1
    assert mail_box[0].message['X-AES-Category'] == 'DANGEROUS ATTACHMENT'
