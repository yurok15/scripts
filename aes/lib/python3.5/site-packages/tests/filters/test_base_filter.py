from unittest.mock import Mock

import pytest

from aes.core.exceptions import InvalidRecipientPolicy, ImproperlyConfigured
from aes.filters.base import BaseFilter, BaseEngineFilter


@pytest.fixture(name='base_filter')
def get_filter(loop):
    return BaseFilter('name', None, {}, loop)


def test_get_action_raises_not_implemented_error(base_filter):
    with pytest.raises(NotImplementedError):
        base_filter.get_action('no_such_action_defined')


def test_get_action(loop):
    class Filter(BaseFilter):
        actions = {'test_action': 'action_object'}

        async def process(self, *args, **kwargs):
            pass

    f = Filter('name', None, {}, loop)
    assert f.get_action('test_action') == 'action_object'


async def test_process_not_implemented(msg, base_filter):
    with pytest.raises(NotImplementedError):
        await base_filter.process(msg)


def test_apply_empty_action(base_filter):
    with pytest.raises(InvalidRecipientPolicy):
        base_filter.apply_action(None, None)
    with pytest.raises(InvalidRecipientPolicy):
        base_filter.apply_action(None)
    with pytest.raises(InvalidRecipientPolicy):
        base_filter.apply_action(None, param='data')


def test_base_engine_filter_no_engine(loop):
    with pytest.raises(ImproperlyConfigured):
        BaseEngineFilter('', None, None, loop)


async def test_base_engine_unknown_engine(loop):
    class MyEngineFilter(BaseEngineFilter):
        engine_class = object

        async def process(self, *args, **kwargs):
            pass

    controller = Mock()
    f = MyEngineFilter('', controller, None, loop)
    controller.engines.find_cls.return_value = None
    with pytest.raises(ImproperlyConfigured):
        await f.start()


async def test_base_engine_process(loop):
    class MyEngineFilter(BaseEngineFilter):
        engine_class = object

        async def process(self, *args, **kwargs):
            await super(MyEngineFilter, self).process(*args, **kwargs)

    f = MyEngineFilter('', None, None, loop)
    with pytest.raises(NotImplementedError):
        await f.process(None)
