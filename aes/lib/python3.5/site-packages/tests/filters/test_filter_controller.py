from aes.filters import WhiteBlackFilter, VadeRetroFilter, ClamAVFilter
from aes.filters.controller import FilterController
from aes.filters.exceptions import DenyException
from aes.message import SkipFlags


settings = [
    ('white_black', {'class': WhiteBlackFilter}),
    ('vade_retro', {'class': VadeRetroFilter}),
    ('clamav', {'class': ClamAVFilter}),
]


def test_base_controller_state(loop):
    controller = FilterController('', None, settings, loop)
    expected = ['white_black', 'vade_retro', 'clamav']
    assert list(controller.services.keys()) == expected


def test_base_filter_controller_settings(loop):
    config = {'clamav': {'class': ClamAVFilter}}
    controller = FilterController('', None, config, loop)
    assert list(controller.services.keys()) == ['clamav']


async def test_process_white_message(msg, policy, loop):
    controller = FilterController('', None, settings, loop)
    policy['group']['white_black'] = {
        'white': [{'template': '*',
                   'bypass': SkipFlags.SPAM | SkipFlags.ANTIVIRUS}]
    }
    await controller.apply(msg)
    assert (msg.filter_reports == {
        'white_black': 'W: *',
        'vade_retro': 'skipped',
        'clamav': 'skipped',
    })


async def test_process_black_message(msg, policy, loop):
    controller = FilterController('', None, settings, loop)
    policy['group']['white_black'] = {
        'black': [{'template': '*',
                   'bypass_filters': SkipFlags.SPAM | SkipFlags.ANTIVIRUS}]
    }
    await controller.apply(msg)
    assert isinstance(msg.exception, DenyException)
    assert msg.filter_reports['white_black'] == 'B: *'


def test_controller_filters_property(loop):
    config = [
        ('white_black', {'class': WhiteBlackFilter}),
        ('clamav', {'class': ClamAVFilter}),
    ]
    controller = FilterController('', None, config, loop)
    filters = list(controller.services.items())
    assert filters[0][0] == 'white_black'
    assert isinstance(filters[0][1], WhiteBlackFilter)
    assert filters[1][0] == 'clamav'
    assert isinstance(filters[1][1], ClamAVFilter)
    assert len(filters) == 2


async def test_controller_fails_when_filter_fails(msg, loop):
    class FakeFailingFilter(WhiteBlackFilter):
        allow_multiple_policy = True

        @staticmethod
        async def process(*args, **kwargs):
            raise DenyException('', '')

    config = {
        'failing_filter': {'class': FakeFailingFilter},
    }
    controller = FilterController('', None, config, loop)
    controller.get_filter = lambda *args, **kwargs: FakeFailingFilter

    await controller.apply(msg)
    assert isinstance(msg.exception, DenyException)
