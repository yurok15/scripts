from aiosmtplib.errors import SMTPDataError

import pytest

from aes.engines.mailflow import MailFlowEngine, MailFlowResult
from aes.filters import MailFlowFilter
from aes.filters.exceptions import (
    DenyException,
    ReturnToQueueException,
)
from aes.services.fake.mailer.service import EmailSenderService
from tests.core.services.aes import InboundAESTestService
from tests.core.services.policy import PolicyTestService


def get_filter_config():
    return {
        'action': 'deny_delivery',
    }


def get_filter(loop, config, result):

    class FakeMailFlowFilter(MailFlowFilter):

        def engine_response(self, message):
            return {'result': result}

    return FakeMailFlowFilter('mail_flow', None, config, loop)


@pytest.mark.parametrize('exception_cls, action', [
    (DenyException, 'deny_delivery'),
    (ReturnToQueueException, 'return_to_queue'),
    (NotImplementedError, 'quarantine'),
])
async def test_actions(simple_msg, loop, exception_cls, action):
    config = get_filter_config()
    config['action'] = action
    mailflow_filter = get_filter(loop, config, MailFlowResult.NON_LEGIT)
    with pytest.raises(exception_cls):
        await mailflow_filter.process(simple_msg, {})


async def test_no_action(simple_msg, loop):
    config = get_filter_config()
    config['action'] = None
    mailflow_filter = get_filter(loop, config, MailFlowResult.NON_LEGIT)
    await mailflow_filter.process(simple_msg, {})


async def test_no_settings(simple_msg, loop):
    mailflow_filter = get_filter(loop, {}, MailFlowResult.NON_LEGIT)
    await mailflow_filter.process(simple_msg, {})


async def test_no_rules_has_action(simple_msg, loop):
    config = get_filter_config()
    config['action'] = 'deny_delivery'
    mailflow_filter = get_filter(
        loop, config, MailFlowResult.ERROR_CONFIGURATION)
    await mailflow_filter.process(simple_msg, {})


async def test_internal(simple_msg, loop):
    config = get_filter_config()
    config['action'] = None
    mailflow_filter = get_filter(loop, config, MailFlowResult.INTERNAL)
    await mailflow_filter.process(simple_msg, {})


async def test_full_flow_return_to_queue(msg, service_runner):
    settings = {
        'ENGINES': {
            'mail_flow': {
                'class': MailFlowEngine,
                'source_ip_present': [{'peer': [], 'chain': []}],
            },
        },
        'FILTERS': {
            'mail_flow': {
                'class': MailFlowFilter,
                'action': 'return_to_queue',
            }
        }
    }
    services = {
        'policy': PolicyTestService,
        'aes': InboundAESTestService,
        'client': EmailSenderService,
    }
    runner = await service_runner(services=services, settings=settings)

    error_msg = (451, "Error: (ReturnToQueueException) ('Mailflow_check fail', "
                      "'MAIL_FLOW', 'aes.filters.mailflow_check')")

    with pytest.raises(SMTPDataError) as exc:
        await runner.run_info(msg)
    assert exc.value.args == error_msg
