from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from unittest.mock import patch

import pytest

from aes.conf import Settings
from aes.engines.controller import EnginesController
from aes.engines.base import BaseAVEngine
from aes.filters.controller import FilterController
from aes.filters.exceptions import DenyException
from aes.filters import CyrenAVFilter, CyrenFilter, SophosFilter, ClamAVFilter
from aes.lib import EICAR

settings = Settings()
engines_config = settings['ENGINES']
cyren_settings = settings['ENGINES']['cyren'].copy()
cyren_settings['spam_support'] = True
cyren_settings_av_only = cyren_settings.copy()
cyren_settings_av_only['spam_support'] = False

# {name: (filter_config, engine_config)}
av_filters = {
    'clam_av': ({'class': ClamAVFilter}, engines_config['clam_av']),
    'cyren_spam': ({'class': CyrenFilter}, cyren_settings),
    'cyren_spam_av_only': ({'class': CyrenFilter}, cyren_settings_av_only),
    'cyren_av': ({'class': CyrenAVFilter}, engines_config['cyren_av']),
    'sophos': ({'class': SophosFilter}, engines_config['sophos']),
}


@pytest.fixture(name='controller', params=av_filters.keys())
def get_controller(request, loop):
    name = request.param
    controller = FilterController(name, None, {name: av_filters[name][0]}, loop)
    engines = EnginesController(name, None, {name: av_filters[name][1]}, loop)
    loop.run_until_complete(engines.start())
    controller.requires(engines)
    loop.run_until_complete(controller.start())
    yield controller
    controller.close()
    engines.close()


async def test_av_strips_sub_attach_virus_message(m_info_factory, controller):
    policy = {
        'group': {
            'antivirus': {
                'actions': [{'name': 'strip_the_message'}]
            }
        }
    }
    for i in range(2):
        msg = MIMEMultipart()
        msg['foo'] = str(i)
        msg.attach(MIMEApplication(EICAR))
        msg.attach(MIMEText('first good attachment'))
        msg.attach(MIMEApplication(EICAR))
        subattach = MIMEMultipart()
        subattach.attach(MIMEApplication(EICAR))
        subattach.attach(MIMEText('first good sub attachment'))
        subattach.attach(MIMEApplication(EICAR))
        subattach.attach(MIMEText('second good sub attachment'))
        subattach.attach(MIMEApplication(EICAR))
        msg.attach(subattach)
        msg.attach(MIMEText('second good attachment'))
        msg.attach(MIMEApplication(EICAR))
        message = m_info_factory(msg, policy=policy)
        f = controller.engines.services[controller.name]
        with patch.object(f.cache.hit_counter, 'inc') as hit_counter:
            with patch.object(f.cache.miss_counter, 'inc') as miss_counter:
                await controller.engines.process(message.envelope)
                await controller.apply(message)
                if i == 0:
                    assert hit_counter.call_count == 5
                    assert miss_counter.call_count == 6
                elif i == 1:
                    assert hit_counter.call_count == 10
                    assert miss_counter.call_count == 1
        payload = [part.get_payload() for part in msg.get_payload()]
        assert len(payload) == 6
        assert payload[0] == 'first good attachment'
        assert payload[2] == 'second good attachment'
        assert 'Attachment removed' in payload[3]
        assert 'Attachment removed' in payload[4]
        assert 'Attachment removed' in payload[5]
        assert len(payload[1]) == 5
        assert payload[1][0].get_payload() == 'first good sub attachment'
        assert payload[1][1].get_payload() == 'second good sub attachment'
        assert 'Attachment removed' in payload[1][2].get_payload()
        assert 'Attachment removed' in payload[1][3].get_payload()
        assert 'Attachment removed' in payload[1][4].get_payload()


async def test_av_passes_no_virus_message(controller, msg):
    await controller.engines.process(msg.envelope)
    await controller[controller.name].process(msg, {})


async def test_av_denies_virus_message(controller, msg_with_virus):
    policy = {'group': {'actions': [{'name': 'deny_delivery'}]}}
    await controller.engines.process(msg_with_virus.envelope)
    with pytest.raises(DenyException):
        await controller[controller.name].process(msg_with_virus, policy)


async def test_fast_plain_text(controller, m_info_factory):
    msg = m_info_factory(MIMEText('hi'))
    envelope = msg.envelope
    async def check_data(_):
        return 'virus'
    engine = controller.engines[controller.name]
    if not isinstance(engine, BaseAVEngine):
        return
    with patch.object(engine, 'check_data', check_data):
        engine.fast_plain_text = False
        await controller.engines.process(envelope)
        assert envelope.engines[controller.name]['virus'] == 'virus'
        engine.fast_plain_text = True
        await controller.engines.process(envelope)
        assert envelope.engines[controller.name]['virus'] is None
