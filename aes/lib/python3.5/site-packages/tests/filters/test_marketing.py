import pytest

from aes.engines import VadeRetroEngine
from aes.filters.exceptions import DenyException
from aes.filters.marketing import MarketingFilter

def get_policy(action='deny_delivery'):
    return {
        'actions': [{'name': action}]
    }


def get_engine(loop):
    return VadeRetroEngine('test', None, {}, loop)


def get_filter(loop, score, category='LEGIT'):

    class FakeMarketingFilter(MarketingFilter):
        def engine_response(self, _):
            return {
                'score': score,
                'category': category,
                'reasons': 'reason'
            }
    f = FakeMarketingFilter('', None, {}, loop)
    f.engine = get_engine(loop)
    return f


async def test_no_policy(msg, loop):
    f = get_filter(loop, 0, 'MCE')
    await f.process(msg, {})


async def test_deny(msg, loop):
    f = get_filter(loop, 0, 'MCE')
    with pytest.raises(DenyException):
        await f.process(msg, get_policy('deny_delivery'))


async def test_add_subject(msg, loop):
    f = get_filter(loop, 105, 'PCE')
    await f.process(msg, get_policy('add_subject'))
    assert '[ MARKETING ]' in msg.email['Subject']
