from aiosmtplib.errors import SMTPRecipientsRefused
import pytest

from aes.message import SkipFlags
from aes.engines.mailflow import MailFlowEngine, MailFlowResult
from aes.filters import ExternalMessageCheck
from aes.services.fake.mailer.service import EmailSenderService

from tests.core.services.aes import InboundAESTestService
from tests.core.services.smtp import SendDelivery
from tests.core.services.policy import PolicyTestService


def get_filter(loop, eng_resp):
    class FakeCheck(ExternalMessageCheck):
        def engine_response(self, message):
            return {'result': eng_resp}
    return FakeCheck('external_message_check', None, {}, loop)


async def test_internal(msg, loop):
    f = get_filter(loop, MailFlowResult.INTERNAL)
    await f.process(msg, {})
    assert not msg.external
    assert msg.skip_filters == SkipFlags.PHISHING


async def test_external_from_trusted(msg, loop):
    msg.policy.trusted_hosts = ['8.8.8.8']
    msg.envelope.source_ip = '8.8.8.8'
    msg._process_headers()
    f = get_filter(loop, MailFlowResult.EXTERNAL)
    await f.process(msg, {})
    assert not msg.external
    assert msg.skip_filters == SkipFlags.PHISHING


async def test_external_by_ip(msg, loop):
    msg.policy.trusted_hosts = ['8.8.8.8']
    msg._process_headers()
    f = get_filter(loop, MailFlowResult.EXTERNAL)
    await f.process(msg, {})
    assert msg.external


@pytest.mark.parametrize('flow', [
    MailFlowResult.INTERNAL,
    MailFlowResult.EXTERNAL
])
async def test_external_by_domain(msg, loop, flow):
    msg.policy.trusted_hosts = ['8.8.8.8']
    msg.envelope.source_ip = '8.8.8.8'
    del msg.email['From']
    msg.email['From'] = 'sender@gmail.com'
    msg._process_headers()
    f = get_filter(loop, flow)
    await f.process(msg, {})
    assert msg.external


async def test_empty_envelope_sender(msg, loop):
    msg.policy.trusted_hosts = ['8.8.8.8']
    msg.envelope.source_ip = '8.8.8.8'
    msg.domain_from = ''
    f = get_filter(loop, MailFlowResult.INTERNAL)
    await f.process(msg, {})
    assert msg.external


async def test_no_account_domains(msg, service_runner, loop):
    settings = {
        'ENGINES': {
            'mail_flow': {
                'class': MailFlowEngine,
                'source_ip_present': [{'peer': ['*'], 'chain': []}],
            },
        },
        'FILTERS': {
            'external_message_check': {'class': ExternalMessageCheck}
        }
    }
    services = {
        'policy': PolicyTestService,
        'aes': InboundAESTestService,
        'client': EmailSenderService,
        'delivery_send': SendDelivery,
    }
    runner = await service_runner(services=services, settings=settings)

    msg._process_headers()
    user = runner['policy'].add_user(msg.x_to[0])
    user.account.add_policy('inbound_filtering', {})
    user.account.domains = []
    with pytest.raises(SMTPRecipientsRefused) as exc:
        await runner.run(msg.mail_from, [msg.mail_to], msg.email)
    assert 'No tenant domains' in exc.value.args[0][msg.mail_to][1]
