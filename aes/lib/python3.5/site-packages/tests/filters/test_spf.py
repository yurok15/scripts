from unittest.mock import patch
import pytest

from aes.filters.spf import logger, SPFFilter
from aes.filters.exceptions import DenyException
from aes.filters.controller import FilterController


@pytest.fixture(name='spf_filter')
def get_filter(loop):
    return SPFFilter('spf', None, None, loop)


async def test_spf_missed(spf_filter, msg):
    del msg.email['X-SPF-STATUS']
    with patch.object(logger, 'warning'):
        await spf_filter.process(msg, object())  # object raises error
        logger.warning.assert_called_once_with('SPF check header missed')


async def test_spf_passed(spf_filter, msg):
    await spf_filter.process(msg, object())  # object raises error


@pytest.fixture(scope='function', name='msg_failed_spf')
def msg_failed_spf_fixture(msg):
    del msg.email['X-SPF-STATUS']
    msg.email['X-SPF-STATUS'] = 'error'
    return msg


async def test_spf_statuses(spf_filter, msg_failed_spf):
    config = [
        {
            'domains': ['intermedia.com'],
            'statuses': ['other_error'],
            'action': {'name': 'deny_delivery'}
        }
    ]
    await spf_filter.process(msg_failed_spf, config)


async def test_spf_wrong_domain(spf_filter, msg_failed_spf):
    config = [
        {
            'domains': ['intermedia2.com'],
            'statuses': ['error'],
            'action': {'name': 'deny_delivery'}
        }
    ]
    await spf_filter.process(msg_failed_spf, config)


async def test_empty_config(spf_filter, msg_failed_spf):
    await spf_filter.process(msg_failed_spf, None)


@pytest.mark.parametrize("domain,pattern,result", [
    ('intermedia.com', 'intermedia.com', True),
    ('intermedia.cam', 'intermedia.com', False),
    ('intermedia.com', ' InTeRmEdIa.CoM ', True),
    ('devintermedia.com', 'intermedia.com', False),
    ('dev.intermedia.com', '*.intermedia.com', True),
    ('intermedia.com', 'intermedia.c?m', True),
    ('intermedia.com', 'intermedia.c?om', False),
    ('intermedia.com', 'intermedia.c*om', True),
    ('intermedia.com', '*media.com', True),
    ('intermedia.com', '*med?a.com', True),
])
async def test_domains_mask(spf_filter, msg_failed_spf, domain, pattern,
                            result):
    msg_failed_spf.domain_from = domain
    config = [
        {
            'domains': [pattern],
            'statuses': ['error'],
            'action': {'name': 'deny_delivery'}
        }
    ]
    if result:
        with pytest.raises(DenyException):
            await spf_filter.process(msg_failed_spf, config)
    else:
        await spf_filter.process(msg_failed_spf, config)


async def test_domains_missed(spf_filter, msg_failed_spf):
    config = [
        {
            'statuses': ['error'],
            'action': {'name': 'deny_delivery'}
        }
    ]
    await spf_filter.process(msg_failed_spf, config)


async def test_exit_on_found(spf_filter, msg_failed_spf):
    config = [
        {
            'domains': ['intermedia.com'],
            'statuses': ['error'],
            'action': {
                'name': 'add_header',
                'header': 'X-TEST_HEADER',
                'value': 'test_value'
            }
        },
        {
            'domains': ['intermedia.com'],
            'statuses': ['error'],
            'action': {'name': 'deny_delivery'}
        }
    ]
    await spf_filter.process(msg_failed_spf, config)
    assert 'X-TEST_HEADER' in msg_failed_spf.email
    assert msg_failed_spf.email['X-TEST_HEADER'] == 'test_value'


async def test_with_controller(loop, msg_failed_spf):
    config = {'spf': {'class': SPFFilter}}
    controller = FilterController('', None, config, loop)
    msg_failed_spf.policy.filtering = {
        'group': {
            'spf': [
                {
                    'domains': ['intermedia.com'],
                    'statuses': ['error'],
                    'action': {'name': 'deny_delivery'}
                }
            ]
        }
    }
    await controller.apply(msg_failed_spf)
    assert isinstance(msg_failed_spf.exception, DenyException)


async def test_actions_applied(spf_filter, msg_failed_spf):
    config = [
        {
            'domains': ['intermedia.com'],
            'statuses': ['error'],
            'action': {'name': 'deny_delivery'},
            'actions': [
                {
                    'name': 'add_header',
                    'header': 'X-TEST_HEADER',
                    'value': 'test_value'
                },
                {
                    'name': 'deny_delivery',
                },
            ]
        }
    ]
    with pytest.raises(DenyException):
        await spf_filter.process(msg_failed_spf, config)
    assert 'X-TEST_HEADER' in msg_failed_spf.email
    assert msg_failed_spf.email['X-TEST_HEADER'] == 'test_value'
