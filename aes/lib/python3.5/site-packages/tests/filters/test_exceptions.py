import pytest

from aes.filters.exceptions import AdminQuarantineException
from aes.delivery.quarantine import FORCED_HEADERS


def test_quarantine_exception():
    obj = AdminQuarantineException('hi', '33', 'smtp:host:42')
    assert obj.smtp_endpoint == 'smtp:host:42'
    assert obj.category == '33'


@pytest.mark.parametrize('q_type,raw_data, q_name', [
    ('AdminQuarantine', True, 'admin'),
    ('UserQuarantine', False, 'user'),
])
async def test_quarantine_exception_raw_data(service_runner, q_type,
                                             q_name, raw_data, msg):
    runner = await service_runner()
    quarantine = runner['quarantine'][q_name]
    policy = {
        'spam': {
            'classification': [
                {
                    'min_score': 0,
                    'actions': [{
                        'name': 'quarantine',
                        'quarantine_type': q_type
                    }]
                },
            ]
        }
    }
    await runner.run_with_policy(msg.email, policy)
    assert len(quarantine.mail_box) == 1
    email = quarantine.mail_box[0].message
    for header in FORCED_HEADERS:
        assert header in email
    assert ('Spam-Stopper-v2' in email) is (not raw_data)
    assert ('X-Spam-Score' in email) is (not raw_data)
