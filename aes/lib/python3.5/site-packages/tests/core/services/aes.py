import os

from aes.services import (
    FilteringService,
    BaseSMTPService,
    InboundSMTPService,
    OutboundSMTPService,
    MailProcessor,
)
from tests.core.services.base import get_certs_folder
from tests.core.services.forks import FakeForksService


class FilteringTestService(FilteringService):
    def requires(self, forks: FakeForksService, processor: MailProcessor):
        super(FilteringTestService, self).requires(forks, processor)


class BaseAESTestService(BaseSMTPService):
    secure = 'ssl'
    server = None

    def __init__(self, name, controller, config, loop):
        path = get_certs_folder()
        config = {
            'host': '127.0.0.1',
            'port': 0,
            self.secure: {
                'cert': os.path.join(path, 'server.crt'),
                'key': os.path.join(path, 'server.key'),
            },
            'data_size_limit': 2 ** 18,
        }
        super(BaseAESTestService, self).__init__(name, controller, config, loop)

    def requires(self, forks: FakeForksService,
                 filtering: FilteringTestService):
        super(BaseAESTestService, self).requires(forks, filtering)

    @property
    def fork(self):
        return self.forks.fork_controller[self.sub_service_name]

    def close(self):
        self.sock = None  # will be closed by fork
        super(BaseAESTestService, self).close()


class InboundAESTestService(BaseAESTestService, InboundSMTPService):
    pass


class AESTLSTestService(InboundAESTestService):
    secure = 'starttls'


class OutboundAESTestService(BaseAESTestService, OutboundSMTPService):
    pass
