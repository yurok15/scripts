import aiohttp
from aiohttp import web

from aes.lib import unused_socket
from aes.services.http import HttpService


class HttpTestService(HttpService):
    def __init__(self, name, controller, config, loop):
        self.sock = unused_socket()
        config = dict()
        config['host'], config['port'] = self.sock.getsockname()
        super(HttpTestService, self).__init__(name, controller, config, loop)
        self.ws_messages = []
        self.ws_connects = []

    def get_url(self, uri=''):
        return 'http://{host}:{port}{uri}'.format(
            uri=uri, host=self.host, port=self.port)

    def add_simple_route(self, route, data, method='GET', content_type=None,
                         status=200):
        async def resolver(request):
            return web.Response(
                status=status,
                body=bytes(data, encoding='utf-8'),
                content_type=content_type
            )
        self.add_route(method, route, resolver)

    async def make_request(self, url, method='GET', data=None, params=None):
        with aiohttp.ClientSession(loop=self.loop) as session:
            async with session.request(method,
                                       self.get_url(url),
                                       data=data,
                                       params=params) as resp:
                return resp.status, await resp.text()

    async def make_ws_connect(self, url):
        session = aiohttp.ClientSession(loop=self.loop)
        ws = await session.ws_connect(self.get_url(url))
        self.ws_connects.append(ws)
        self.loop.create_task(self.ws_handler(ws))
        return session

    async def ws_handler(self, ws):
        try:
            async for msg in ws:
                self.ws_messages.append(msg)
        finally:
            ws.close()
