import asyncio

from aes.services.cluster.base import NodeConnectionInfo
from aes.services import ClusterService, FilteringService, ForksService
from aes.lib import unused_socket


class ClusterTestService(ClusterService):
    service = None

    def __init__(self, name, controller, config, loop):
        self.host, self.port = unused_socket().getsockname()
        config = {
            'host': self.host,
            'port': self.port,
            'name': 'test',
            'reconnect_period': 15,
            'timeout': 15,
            'cluster_hosts': None,
        }
        super(ClusterTestService, self).__init__(name, controller, config, loop)


class ClusterTestSecondNodeService(ClusterService):
    service = None
    cluster_name = 'test'
    permanent = False

    def __init__(self, name, controller, config, loop):
        self.host, self.port = unused_socket().getsockname()
        config = {
            'host': self.host,
            'port': self.port,
            'name': self.cluster_name,
            'reconnect_period': 15,
            'timeout': 15,
            'cluster_hosts': None,
        }
        super(ClusterTestSecondNodeService, self).__init__(
            name, controller, config, loop)
        self.waiter = asyncio.Future(loop=loop)

    def requires(self, service: ClusterTestService):
        def callback(node):
            if node.name != self.cluster.node_name:
                return
            if not self.waiter.done():
                self.waiter.set_result(node)
        self.service = service
        self.service.cluster.add_connected_callback(callback)

    def optional(self, filtering: FilteringService, forks: ForksService):
        self.filtering = filtering
        self.forks = forks

    async def start(self):
        await self.service.started
        await super(ClusterTestSecondNodeService, self).start()
        # need to copy original info to preserve discovery behavior with self
        # cluster name
        original_info = self.service.cluster.info
        info = NodeConnectionInfo(
            original_info.name,
            self.cluster_name,
            original_info.host,
            original_info.port)
        node = self.cluster.node_discovered(info, permanent=True)
        await self.waiter
        protocol = await node.protocol
        await protocol.handshake_waiter


class TribeTestService(ClusterTestSecondNodeService):
    cluster_name = None
    permanent = True
