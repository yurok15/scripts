import socket

from aes.core.communication.comm_protocol import CommunicationProtocol
from aes.core.communication.cluster import CommunicationClusterNode
from aes.services import ForksService
from aes.services.forks.process import ForkController


class FakeForksService(ForksService):
    fork_controller = None

    def __init__(self, name, controller, config, loop):
        config = {'count': 0}
        super(FakeForksService, self).__init__(name, controller, config, loop)
        self.settings = controller.settings
        self.num = 0
        self.comm_sock, self.server_sock = socket.socketpair()

    async def start(self):
        self.fork_controller = ForkController(self)
        self.fork_controller.controller = self.controller
        protocol = await CommunicationProtocol.connect_socket(
            self.loop, self.server_sock, None)
        self.cluster.add_node(CommunicationClusterNode(0, protocol))
        await self.fork_controller.start()

    def close(self):
        if self.fork_controller:
            self.fork_controller.close()
            self.fork_controller = None
        super(FakeForksService, self).close()
