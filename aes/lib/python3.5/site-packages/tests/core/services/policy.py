import json
from random import randint

from aiohttp import web

from aes.core.controller import BaseService
from tests.core.services.http import HttpTestService


class Policy:
    def __init__(self, policy_type, pk, data=None):
        self.policy_type = policy_type
        self.id = pk
        self.versions = {}
        self.last_version = 0
        self.data = data
        self.name = '%s#%s' % (policy_type, pk)
        self.tenant_id = None

    @property
    def data(self):
        return self.versions.get(self.last_version)

    @data.setter
    def data(self, value):
        self.last_version += 1
        self.versions[self.last_version] = value


class User:
    def __init__(self, service, email):
        self.policies = {
            'inbound_personal': None,
            'outbound_personal': None
        }
        self.service = service
        self.email = email
        self.account = None

    def add_policy(self, policy_type, data):
        if policy_type in self.policies:
            policy = self.service.add_policy(policy_type, data)
            self.policies[policy_type] = policy
        else:
            raise TypeError('Not user policy type: %s' % policy_type)
        return policy


class Account:

    def __init__(self, service, tenant_id=None):
        self.policies = {
            'inbound_transport': None,
            'outbound_transport': None,
            'inbound_filtering': None,
            'outbound_filtering': None,
        }
        self.users = {}
        self.service = service
        self.tenant_id = tenant_id or randint(1000, 9999)
        self.service.accounts[self.tenant_id] = self
        self.policies['inbound_global'] = self.service.inbound_global_policy
        self.policies['outbound_global'] = self.service.outbound_global_policy
        self.policies['tenant'] = self.service.account_policy
        self.domains = []

    def add_policy(self, policy_type, data):
        if policy_type in self.policies:
            policy = self.service.add_policy(policy_type, data)
            self.policies[policy_type] = policy
            policy.tenant_id = self.tenant_id
        else:
            raise TypeError('Not account policy type: %s' % policy_type)
        return policy

    def add_user(self, user: User):
        self.users[user.email] = user
        user.account = self
        domain = user.email.split('@')[-1]
        if domain not in self.domains:
            self.domains.append(domain)
        return user

    def add_domains(self, domains):
        for domain in domains:
            if domain not in self.domains:
                self.domains.append(domain)

    def update_policy(self, policy_type, data):
        if policy_type not in self.policies:
            self.add_policy(policy_type, data)
        new = self.policies[policy_type].data
        new.update(data)
        self.policies[policy_type].data = new


class PolicyTestService(BaseService):
    http_service = None

    def __init__(self, name, controller, settings, loop):
        super(PolicyTestService, self).__init__(
            name, controller, settings, loop)
        self.last_policy = 0
        self.accounts = {}
        self.users = {}
        self.policies = {}
        self.account_policy = self.add_policy('tenant', {})
        self.inbound_global_policy = self.add_policy('inbound_global')
        self.outbound_global_policy = self.add_policy('outbound_global')

    def add_policy(self, policy_type, data=None):
        self.last_policy += 1
        policy = Policy(policy_type, self.last_policy, data)
        self.policies[self.last_policy] = policy
        return policy

    def add_user(self, email, tenant_id=None):
        if email not in self.users:
            self.users[email] = User(self, email)
            account = self.add_account(tenant_id)
            account.add_user(self.users[email])
        return self.users[email]

    def add_account(self, tenant_id=None):
        if tenant_id not in self.accounts:
            account = Account(self, tenant_id)
            tenant_id = account.tenant_id
        return self.accounts[tenant_id]

    async def get_policy_data(self, request):
        policy_id = int(request.match_info['id'])
        if policy_id not in self.policies:
            return web.Response(status=404)
        policy = self.policies[policy_id]
        return web.Response(
            status=200,
            body=json.dumps(policy.data).encode('utf-8'),
            content_type='application/json'
        )

    async def get_policy_list(self, request):
        email = request.match_info['email']
        if email not in self.users:
            return web.Response(status=404)
        else:
            user = self.users[email]

        policy_list = user.policies  # type: dict
        policy_list.update(user.account.policies)

        data = [{
            'name': policy.name,
            'policy_id': policy.id,
            'last_version': policy.last_version,
            'policy_type': policy.policy_type,
            'display_name': 'POLICY#%s' % policy.id,
            'tenant_id': policy.tenant_id,
        } for policy in policy_list.values() if policy]
        return web.Response(
            status=200,
            body=json.dumps(data).encode('utf-8'),
            content_type='application/json'
        )

    async def get_domains(self, request):
        tenant_id = int(request.match_info['tenant_id'])
        if tenant_id in self.accounts:
            data = [{
                'domain_id': self.accounts[tenant_id].domains.index(domain),
                'domain_name': domain,
                'tenant_id': tenant_id,
            } for domain in self.accounts[tenant_id].domains]
            return web.Response(
                status=200,
                body=json.dumps(data).encode('utf-8'),
                content_type='application/json'
            )
        return web.Response(status=404)

    def requires(self, http: HttpTestService):
        self.http_service = http
        self.http_service.add_route(
            'GET', r'/policies/{id:\d+}/settings', self.get_policy_data)
        self.http_service.add_route(
            'GET', r'/recipients/{email}/policies', self.get_policy_list)
        self.controller.settings['POLICY_SERVICE']['url'] = "http://%s:%s" % (
            self.http_service.host,
            self.http_service.port
        )
        self.http_service.add_route(
            'GET', r'/tenants/{tenant_id:\d+}/domains', self.get_domains)

    def configure_user(self, email, policy_data, inbound, tenant_id=None):
        user = self.add_user(email, tenant_id)
        account = user.account

        if 'personal' in policy_data:
            name = 'inbound_personal' if inbound else 'outbound_personal'
            user.add_policy(name, policy_data['personal'])
        if 'group' in policy_data:
            name = 'inbound_filtering' if inbound else 'outbound_filtering'
            account.add_policy(name, policy_data['group'])
        if 'account' in policy_data:
            account.add_policy('tenant', policy_data['account'])

    @staticmethod
    def configure_transport(account: Account, url, inbound=True):
        name = 'inbound_transport' if inbound else 'outbound_transport'
        account.add_policy(name, {'next_hop': url})
