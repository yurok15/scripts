import asyncio
from aes.main import main
from aes.services.fake.mailer.service import EmailSenderService

from tests.core.runner import ServicesRunner
from tests.core.services.forks import FakeForksService
from tests.core.services.aes import InboundAESTestService


def test_main_app(service_runner, simple_msg, loop):
    recipient = 'recipient@local'
    sender = 'sender@intermedia.com'
    services = ServicesRunner.default_services.copy()
    del services['inbound_smtp']
    del services['outbound_smtp']
    waiter = asyncio.Future(loop=loop)

    class WaitedForks(FakeForksService):
        async def start(self):
            await super(WaitedForks, self).start()
            waiter.set_result(self.controller)

    async def send_mail():
        controller = await waiter
        service = controller['client']
        try:
            await service.send_message(sender, recipient, simple_msg.email)
        except Exception as e:
            import logging
            logging.exception(e)
        finally:
            service.loop.stop()

    runner = loop.run_until_complete(
        service_runner(services=services)
    )
    runner['policy'].configure_user(recipient, {'group': {}}, True)
    runner.loop.create_task(send_mail())
    runner.settings['SERVICES'] = {
        'aes': {'class': InboundAESTestService},
        'forks': {'class': WaitedForks},
        'client': {'class': EmailSenderService},
    }
    main(loop=loop, settings=runner.settings)
    assert len(runner['delivery_send'].mail_box) == 1
