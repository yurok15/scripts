from unittest.mock import patch
import uuid

from aiosmtplib.errors import (
    SMTPDataError,
    SMTPRecipientsRefused,
    SMTPException,
    SMTPSenderRefused,
)
import pytest

from aes.filters.base import BaseFilter
from aes.filters.base_actions import AdminQuarantineDelivery


@pytest.mark.parametrize('inbound', [True, False])
async def test_email_delivery_to_many_recipients(inbound, service_runner, msg):
    runner = await service_runner()
    recipients = ['recipient1@local', 'recipient2@local']
    users = recipients if inbound else [msg.mail_from]
    for user in users:
        runner['policy'].configure_user(user, {
            'group': msg.policy.filtering['group'],
        }, inbound=inbound)
    result = await runner.run(msg.mail_from, recipients, msg.email, inbound)
    assert isinstance(result, tuple)
    result = result[1]
    pos = result.find('queued as ')
    assert pos
    pos += len('queued as ')
    result = result[pos:]
    uuid.UUID(result)
    mail_box = runner['delivery_send'].mail_box
    assert len(mail_box) == 2
    for data in mail_box:
        assert data.mail_from == msg.mail_from
    rcpt = [data.rcpt_tos[0] for data in mail_box]
    assert rcpt == recipients


async def test_white_message_with_virus(service_runner, msg_with_virus):
    policy = {
        'filters': {
            'white_black': dict(white=[{
                'template': 'sender@intermedia.com',
                'bypass_filters': ['spam', 'antivirus']
            }], black=[])
        }
    }
    runner = await service_runner()
    await runner.run_with_policy(msg_with_virus.email, policy, True)
    assert len(runner['delivery_send'].mail_box) == 1


async def test_simple_message_with_virus(service_runner, msg_with_virus):
    policy = {
        'antivirus': {'actions': [{'name': 'deny_delivery'}]},
    }
    runner = await service_runner()
    runner['clamav'].configure(['EICAR'])
    await runner.run_with_policy(msg_with_virus.email, policy, True)
    assert len(runner['delivery_send'].mail_box) == 0
    assert len(runner['delivery_deny'].mail_box) == 1


@pytest.mark.parametrize('inbound', [True, False])
async def test_no_policy(simple_msg, service_runner, inbound):
    """ Also check that sentry capturing exception only once. """
    msg = simple_msg.email
    runner = await service_runner()
    with pytest.raises(SMTPException) as ctx:
        with patch('aes.services.smtp.server.logger'):
            with patch('aes.services.smtp.server.sentry_client') as s:
                await runner.run(
                    'sender@local', 'recipient@local', msg, inbound)
    if inbound:
        assert isinstance(ctx.value, SMTPRecipientsRefused)
        exc = ctx.value.args[0]['recipient@local']
    else:
        assert isinstance(ctx.value, SMTPSenderRefused)
        exc = ctx.value.code, ctx.value.message
    assert exc[0] == 451
    assert 'Unknown email address' in exc[1]
    assert s.captureException.called


async def test_unexpected_exceptions(simple_msg, service_runner):
    path = 'aes.services.smtp.server.InboundSMTPServer.handle_data'
    runner = await service_runner()
    with pytest.raises(SMTPDataError) as ctx:
        with patch('aes.services.smtp.server.logger') as logger:
            with patch('aes.services.smtp.server.sentry_client') as sentry:
                with patch(path, side_effect=NotImplementedError('test')):
                    await runner.run_info(simple_msg)
    assert ctx.value.code == 451
    assert ctx.value.message == 'Error: (NotImplementedError) test'
    assert sentry.captureException.called
    assert logger.exception.called


@pytest.mark.parametrize('inbound', [True, False])
async def test_no_group_policy(simple_msg, service_runner, inbound):
    msg = simple_msg.email
    runner = await service_runner()
    runner['policy'].configure_user('recipient@local', {}, inbound)
    runner['policy'].configure_user('sender@local', {}, inbound)
    with pytest.raises(SMTPException) as ctx:
        with patch('aes.services.smtp.server.logger'):
            with patch('aes.services.smtp.server.sentry_client'):
                await runner.run(
                    'sender@local', 'recipient@local', msg, inbound)
    if inbound:
        assert isinstance(ctx.value, SMTPRecipientsRefused)
        exc = ctx.value.args[0]['recipient@local']
    else:
        assert isinstance(ctx.value, SMTPSenderRefused)
        exc = ctx.value.code, ctx.value.message
    assert exc[0] == 451
    assert 'No user group policy' in exc[1]


async def test_no_headers(service_runner, msg):
    msg.email['X-AES-Category'] = 'good'
    msg.email['X-Spam-Score'] = 'foo'
    msg.email['X-Spam-Status'] = 'bar'
    msg.email['Spam-Stopper-Policy'] = 'bar'
    msg.email['X-SOURCE-IP'] = '127.0.0.1'
    policy = {
        'filters': {}
    }
    runner = await service_runner()
    await runner.run_with_policy(msg.email, policy)
    assert len(runner['delivery_send'].mail_box) == 1
    received = runner['delivery_send'].mail_box[0].message
    assert received['Spam-Stopper-v2'] == 'Yes'
    assert received['X-Spam-Score'] != 'foo'
    assert 'X-Spam-Status' not in received
    assert received['Spam-Stopper-Policy'] != 'bar'
    assert received['X-AES-Category'] == 'LEGIT'


async def test_whitelisting(simple_msg, service_runner):
    policy = {
        'filters': {
            'white_black': {
                'white': [{
                    'template': '81.19.67.203',
                    'bypass_filters': ['antivirus', 'spam']
                }],
                'black': [],
            },
            'antivirus': {
                'actions': [{"name": 'bounce_delivery'}]
            }
        }
    }
    runner = await service_runner()
    runner['clamav'].configure(['EICAR'])
    await runner.run_with_policy(simple_msg.email, policy)
    assert len(runner['delivery_send'].mail_box) == 1


class QuarantineFilter(BaseFilter):
    actions = {
        'admin_quarantine': AdminQuarantineDelivery('hi', ''),
    }

    async def process(self, message, white_black=None):
        self.apply_action(message, **white_black)


async def test_quarantine(service_runner, no_filters_msg):
    settings = {
        'FILTERS': {'white_black': {'class': QuarantineFilter}}
    }
    runner = await service_runner(settings=settings)
    action = runner['quarantine']['admin'].action
    no_filters_msg.policy.filtering['group']['white_black'] = action
    await runner.run_info(no_filters_msg)
    assert len(runner['quarantine']['admin'].mail_box) == 1
